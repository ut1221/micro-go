// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/monitor.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on MonitorServerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MonitorServerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorServerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MonitorServerReqMultiError, or nil if none found.
func (m *MonitorServerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorServerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MonitorServerReqMultiError(errors)
	}

	return nil
}

// MonitorServerReqMultiError is an error wrapping multiple validation errors
// returned by MonitorServerReq.ValidateAll() if the designated constraints
// aren't met.
type MonitorServerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorServerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorServerReqMultiError) AllErrors() []error { return m }

// MonitorServerReqValidationError is the validation error returned by
// MonitorServerReq.Validate if the designated constraints aren't met.
type MonitorServerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorServerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorServerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorServerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorServerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorServerReqValidationError) ErrorName() string { return "MonitorServerReqValidationError" }

// Error satisfies the builtin error interface
func (e MonitorServerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorServerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorServerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorServerReqValidationError{}

// Validate checks the field values on MonitorServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MonitorServerReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MonitorServerReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MonitorServerReplyMultiError, or nil if none found.
func (m *MonitorServerReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MonitorServerReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorServerReplyValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Mem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Mem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorServerReplyValidationError{
				field:  "Mem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetJvm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Jvm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Jvm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJvm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorServerReplyValidationError{
				field:  "Jvm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSys()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Sys",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MonitorServerReplyValidationError{
					field:  "Sys",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSys()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MonitorServerReplyValidationError{
				field:  "Sys",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetSysFiles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MonitorServerReplyValidationError{
						field:  fmt.Sprintf("SysFiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MonitorServerReplyValidationError{
						field:  fmt.Sprintf("SysFiles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MonitorServerReplyValidationError{
					field:  fmt.Sprintf("SysFiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MonitorServerReplyMultiError(errors)
	}

	return nil
}

// MonitorServerReplyMultiError is an error wrapping multiple validation errors
// returned by MonitorServerReply.ValidateAll() if the designated constraints
// aren't met.
type MonitorServerReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MonitorServerReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MonitorServerReplyMultiError) AllErrors() []error { return m }

// MonitorServerReplyValidationError is the validation error returned by
// MonitorServerReply.Validate if the designated constraints aren't met.
type MonitorServerReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MonitorServerReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MonitorServerReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MonitorServerReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MonitorServerReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MonitorServerReplyValidationError) ErrorName() string {
	return "MonitorServerReplyValidationError"
}

// Error satisfies the builtin error interface
func (e MonitorServerReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMonitorServerReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MonitorServerReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MonitorServerReplyValidationError{}

// Validate checks the field values on Cpu with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Cpu) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Cpu with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CpuMultiError, or nil if none found.
func (m *Cpu) ValidateAll() error {
	return m.validate(true)
}

func (m *Cpu) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CpuNum

	// no validation rules for Total

	// no validation rules for Sys

	// no validation rules for Used

	// no validation rules for Wait

	// no validation rules for Free

	if len(errors) > 0 {
		return CpuMultiError(errors)
	}

	return nil
}

// CpuMultiError is an error wrapping multiple validation errors returned by
// Cpu.ValidateAll() if the designated constraints aren't met.
type CpuMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CpuMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CpuMultiError) AllErrors() []error { return m }

// CpuValidationError is the validation error returned by Cpu.Validate if the
// designated constraints aren't met.
type CpuValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CpuValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CpuValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CpuValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CpuValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CpuValidationError) ErrorName() string { return "CpuValidationError" }

// Error satisfies the builtin error interface
func (e CpuValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCpu.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CpuValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CpuValidationError{}

// Validate checks the field values on Mem with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Mem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Mem with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemMultiError, or nil if none found.
func (m *Mem) ValidateAll() error {
	return m.validate(true)
}

func (m *Mem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Used

	// no validation rules for Free

	// no validation rules for Usage

	if len(errors) > 0 {
		return MemMultiError(errors)
	}

	return nil
}

// MemMultiError is an error wrapping multiple validation errors returned by
// Mem.ValidateAll() if the designated constraints aren't met.
type MemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemMultiError) AllErrors() []error { return m }

// MemValidationError is the validation error returned by Mem.Validate if the
// designated constraints aren't met.
type MemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemValidationError) ErrorName() string { return "MemValidationError" }

// Error satisfies the builtin error interface
func (e MemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemValidationError{}

// Validate checks the field values on Jvm with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Jvm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Jvm with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JvmMultiError, or nil if none found.
func (m *Jvm) ValidateAll() error {
	return m.validate(true)
}

func (m *Jvm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Max

	// no validation rules for Free

	// no validation rules for Version

	// no validation rules for Home

	// no validation rules for RunTime

	// no validation rules for InputArgs

	// no validation rules for StartTime

	// no validation rules for Used

	// no validation rules for Usage

	// no validation rules for Name

	if len(errors) > 0 {
		return JvmMultiError(errors)
	}

	return nil
}

// JvmMultiError is an error wrapping multiple validation errors returned by
// Jvm.ValidateAll() if the designated constraints aren't met.
type JvmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JvmMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JvmMultiError) AllErrors() []error { return m }

// JvmValidationError is the validation error returned by Jvm.Validate if the
// designated constraints aren't met.
type JvmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JvmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JvmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JvmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JvmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JvmValidationError) ErrorName() string { return "JvmValidationError" }

// Error satisfies the builtin error interface
func (e JvmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJvm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JvmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JvmValidationError{}

// Validate checks the field values on Sys with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Sys) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Sys with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SysMultiError, or nil if none found.
func (m *Sys) ValidateAll() error {
	return m.validate(true)
}

func (m *Sys) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ComputerName

	// no validation rules for ComputerIp

	// no validation rules for UserDir

	// no validation rules for OsName

	// no validation rules for OsArch

	if len(errors) > 0 {
		return SysMultiError(errors)
	}

	return nil
}

// SysMultiError is an error wrapping multiple validation errors returned by
// Sys.ValidateAll() if the designated constraints aren't met.
type SysMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysMultiError) AllErrors() []error { return m }

// SysValidationError is the validation error returned by Sys.Validate if the
// designated constraints aren't met.
type SysValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysValidationError) ErrorName() string { return "SysValidationError" }

// Error satisfies the builtin error interface
func (e SysValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSys.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysValidationError{}

// Validate checks the field values on SysFiles with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysFiles) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysFiles with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysFilesMultiError, or nil
// if none found.
func (m *SysFiles) ValidateAll() error {
	return m.validate(true)
}

func (m *SysFiles) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DirName

	// no validation rules for SysTypeName

	// no validation rules for TypeName

	// no validation rules for Total

	// no validation rules for Free

	// no validation rules for Used

	// no validation rules for Usage

	if len(errors) > 0 {
		return SysFilesMultiError(errors)
	}

	return nil
}

// SysFilesMultiError is an error wrapping multiple validation errors returned
// by SysFiles.ValidateAll() if the designated constraints aren't met.
type SysFilesMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysFilesMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysFilesMultiError) AllErrors() []error { return m }

// SysFilesValidationError is the validation error returned by
// SysFiles.Validate if the designated constraints aren't met.
type SysFilesValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysFilesValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysFilesValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysFilesValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysFilesValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysFilesValidationError) ErrorName() string { return "SysFilesValidationError" }

// Error satisfies the builtin error interface
func (e SysFilesValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysFiles.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysFilesValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysFilesValidationError{}
