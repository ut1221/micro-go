// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/sys_role.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ModifySysRoleRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModifySysRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModifySysRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModifySysRoleRepMultiError, or nil if none found.
func (m *ModifySysRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ModifySysRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remark

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleKey

	// no validation rules for RoleSort

	// no validation rules for DataScope

	// no validation rules for MenuCheckStrictly

	// no validation rules for DeptCheckStrictly

	// no validation rules for Status

	// no validation rules for Flag

	// no validation rules for Admin

	if len(errors) > 0 {
		return ModifySysRoleRepMultiError(errors)
	}

	return nil
}

// ModifySysRoleRepMultiError is an error wrapping multiple validation errors
// returned by ModifySysRoleRep.ValidateAll() if the designated constraints
// aren't met.
type ModifySysRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModifySysRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModifySysRoleRepMultiError) AllErrors() []error { return m }

// ModifySysRoleRepValidationError is the validation error returned by
// ModifySysRoleRep.Validate if the designated constraints aren't met.
type ModifySysRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModifySysRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModifySysRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModifySysRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModifySysRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModifySysRoleRepValidationError) ErrorName() string { return "ModifySysRoleRepValidationError" }

// Error satisfies the builtin error interface
func (e ModifySysRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModifySysRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModifySysRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModifySysRoleRepValidationError{}

// Validate checks the field values on DataScopeSysRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DataScopeSysRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DataScopeSysRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DataScopeSysRoleRepMultiError, or nil if none found.
func (m *DataScopeSysRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DataScopeSysRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for DataScope

	if len(errors) > 0 {
		return DataScopeSysRoleRepMultiError(errors)
	}

	return nil
}

// DataScopeSysRoleRepMultiError is an error wrapping multiple validation
// errors returned by DataScopeSysRoleRep.ValidateAll() if the designated
// constraints aren't met.
type DataScopeSysRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DataScopeSysRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DataScopeSysRoleRepMultiError) AllErrors() []error { return m }

// DataScopeSysRoleRepValidationError is the validation error returned by
// DataScopeSysRoleRep.Validate if the designated constraints aren't met.
type DataScopeSysRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataScopeSysRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataScopeSysRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataScopeSysRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataScopeSysRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataScopeSysRoleRepValidationError) ErrorName() string {
	return "DataScopeSysRoleRepValidationError"
}

// Error satisfies the builtin error interface
func (e DataScopeSysRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataScopeSysRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataScopeSysRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataScopeSysRoleRepValidationError{}

// Validate checks the field values on ChangeStatusSysRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ChangeStatusSysRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ChangeStatusSysRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ChangeStatusSysRoleRepMultiError, or nil if none found.
func (m *ChangeStatusSysRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ChangeStatusSysRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Status

	if len(errors) > 0 {
		return ChangeStatusSysRoleRepMultiError(errors)
	}

	return nil
}

// ChangeStatusSysRoleRepMultiError is an error wrapping multiple validation
// errors returned by ChangeStatusSysRoleRep.ValidateAll() if the designated
// constraints aren't met.
type ChangeStatusSysRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ChangeStatusSysRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ChangeStatusSysRoleRepMultiError) AllErrors() []error { return m }

// ChangeStatusSysRoleRepValidationError is the validation error returned by
// ChangeStatusSysRoleRep.Validate if the designated constraints aren't met.
type ChangeStatusSysRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeStatusSysRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeStatusSysRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeStatusSysRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeStatusSysRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeStatusSysRoleRepValidationError) ErrorName() string {
	return "ChangeStatusSysRoleRepValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeStatusSysRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeStatusSysRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeStatusSysRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeStatusSysRoleRepValidationError{}

// Validate checks the field values on DeleteSysRoleRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysRoleRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysRoleRepMultiError, or nil if none found.
func (m *DeleteSysRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSysRoleRepMultiError(errors)
	}

	return nil
}

// DeleteSysRoleRepMultiError is an error wrapping multiple validation errors
// returned by DeleteSysRoleRep.ValidateAll() if the designated constraints
// aren't met.
type DeleteSysRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysRoleRepMultiError) AllErrors() []error { return m }

// DeleteSysRoleRepValidationError is the validation error returned by
// DeleteSysRoleRep.Validate if the designated constraints aren't met.
type DeleteSysRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysRoleRepValidationError) ErrorName() string { return "DeleteSysRoleRepValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSysRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysRoleRepValidationError{}

// Validate checks the field values on GetSysRoleRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSysRoleRepMultiError, or
// nil if none found.
func (m *GetSysRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetSysRoleRepMultiError(errors)
	}

	return nil
}

// GetSysRoleRepMultiError is an error wrapping multiple validation errors
// returned by GetSysRoleRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleRepMultiError) AllErrors() []error { return m }

// GetSysRoleRepValidationError is the validation error returned by
// GetSysRoleRep.Validate if the designated constraints aren't met.
type GetSysRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleRepValidationError) ErrorName() string { return "GetSysRoleRepValidationError" }

// Error satisfies the builtin error interface
func (e GetSysRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleRepValidationError{}

// Validate checks the field values on GetSysRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleReplyMultiError, or nil if none found.
func (m *GetSysRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysRoleReplyValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysRoleReplyValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysRoleReplyValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysRoleReplyMultiError(errors)
	}

	return nil
}

// GetSysRoleReplyMultiError is an error wrapping multiple validation errors
// returned by GetSysRoleReply.ValidateAll() if the designated constraints
// aren't met.
type GetSysRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleReplyMultiError) AllErrors() []error { return m }

// GetSysRoleReplyValidationError is the validation error returned by
// GetSysRoleReply.Validate if the designated constraints aren't met.
type GetSysRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleReplyValidationError) ErrorName() string { return "GetSysRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSysRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleReplyValidationError{}

// Validate checks the field values on ListSysRoleRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSysRoleRepMultiError,
// or nil if none found.
func (m *ListSysRoleRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := ListSysRoleRepValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListSysRoleRepValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSysRoleRepMultiError(errors)
	}

	return nil
}

// ListSysRoleRepMultiError is an error wrapping multiple validation errors
// returned by ListSysRoleRep.ValidateAll() if the designated constraints
// aren't met.
type ListSysRoleRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleRepMultiError) AllErrors() []error { return m }

// ListSysRoleRepValidationError is the validation error returned by
// ListSysRoleRep.Validate if the designated constraints aren't met.
type ListSysRoleRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleRepValidationError) ErrorName() string { return "ListSysRoleRepValidationError" }

// Error satisfies the builtin error interface
func (e ListSysRoleRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleRepValidationError{}

// Validate checks the field values on ListSysRoleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysRoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysRoleReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysRoleReplyMultiError, or nil if none found.
func (m *ListSysRoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysRoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysRoleReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysRoleReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysRoleReplyValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysRoleReplyMultiError(errors)
	}

	return nil
}

// ListSysRoleReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysRoleReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysRoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysRoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysRoleReplyMultiError) AllErrors() []error { return m }

// ListSysRoleReplyValidationError is the validation error returned by
// ListSysRoleReply.Validate if the designated constraints aren't met.
type ListSysRoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysRoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysRoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysRoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysRoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysRoleReplyValidationError) ErrorName() string { return "ListSysRoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysRoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysRoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysRoleReplyValidationError{}

// Validate checks the field values on IsAllocatedListRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAllocatedListRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAllocatedListRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAllocatedListRepMultiError, or nil if none found.
func (m *IsAllocatedListRep) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAllocatedListRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := IsAllocatedListRepValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := IsAllocatedListRepValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for RoleId

	if len(errors) > 0 {
		return IsAllocatedListRepMultiError(errors)
	}

	return nil
}

// IsAllocatedListRepMultiError is an error wrapping multiple validation errors
// returned by IsAllocatedListRep.ValidateAll() if the designated constraints
// aren't met.
type IsAllocatedListRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAllocatedListRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAllocatedListRepMultiError) AllErrors() []error { return m }

// IsAllocatedListRepValidationError is the validation error returned by
// IsAllocatedListRep.Validate if the designated constraints aren't met.
type IsAllocatedListRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAllocatedListRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAllocatedListRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAllocatedListRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAllocatedListRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAllocatedListRepValidationError) ErrorName() string {
	return "IsAllocatedListRepValidationError"
}

// Error satisfies the builtin error interface
func (e IsAllocatedListRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAllocatedListRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAllocatedListRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAllocatedListRepValidationError{}

// Validate checks the field values on IsAllocatedListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IsAllocatedListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IsAllocatedListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IsAllocatedListReplyMultiError, or nil if none found.
func (m *IsAllocatedListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IsAllocatedListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, IsAllocatedListReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, IsAllocatedListReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IsAllocatedListReplyValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return IsAllocatedListReplyMultiError(errors)
	}

	return nil
}

// IsAllocatedListReplyMultiError is an error wrapping multiple validation
// errors returned by IsAllocatedListReply.ValidateAll() if the designated
// constraints aren't met.
type IsAllocatedListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IsAllocatedListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IsAllocatedListReplyMultiError) AllErrors() []error { return m }

// IsAllocatedListReplyValidationError is the validation error returned by
// IsAllocatedListReply.Validate if the designated constraints aren't met.
type IsAllocatedListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsAllocatedListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsAllocatedListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsAllocatedListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsAllocatedListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsAllocatedListReplyValidationError) ErrorName() string {
	return "IsAllocatedListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IsAllocatedListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsAllocatedListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsAllocatedListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsAllocatedListReplyValidationError{}

// Validate checks the field values on AuthUserCancelRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AuthUserCancelRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserCancelRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserCancelRepMultiError, or nil if none found.
func (m *AuthUserCancelRep) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserCancelRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserId

	if len(errors) > 0 {
		return AuthUserCancelRepMultiError(errors)
	}

	return nil
}

// AuthUserCancelRepMultiError is an error wrapping multiple validation errors
// returned by AuthUserCancelRep.ValidateAll() if the designated constraints
// aren't met.
type AuthUserCancelRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserCancelRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserCancelRepMultiError) AllErrors() []error { return m }

// AuthUserCancelRepValidationError is the validation error returned by
// AuthUserCancelRep.Validate if the designated constraints aren't met.
type AuthUserCancelRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserCancelRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserCancelRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserCancelRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserCancelRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserCancelRepValidationError) ErrorName() string {
	return "AuthUserCancelRepValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserCancelRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserCancelRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserCancelRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserCancelRepValidationError{}

// Validate checks the field values on AuthUserSelectAllRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthUserSelectAllRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthUserSelectAllRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthUserSelectAllRepMultiError, or nil if none found.
func (m *AuthUserSelectAllRep) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthUserSelectAllRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for UserIds

	if len(errors) > 0 {
		return AuthUserSelectAllRepMultiError(errors)
	}

	return nil
}

// AuthUserSelectAllRepMultiError is an error wrapping multiple validation
// errors returned by AuthUserSelectAllRep.ValidateAll() if the designated
// constraints aren't met.
type AuthUserSelectAllRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthUserSelectAllRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthUserSelectAllRepMultiError) AllErrors() []error { return m }

// AuthUserSelectAllRepValidationError is the validation error returned by
// AuthUserSelectAllRep.Validate if the designated constraints aren't met.
type AuthUserSelectAllRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthUserSelectAllRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthUserSelectAllRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthUserSelectAllRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthUserSelectAllRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthUserSelectAllRepValidationError) ErrorName() string {
	return "AuthUserSelectAllRepValidationError"
}

// Error satisfies the builtin error interface
func (e AuthUserSelectAllRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthUserSelectAllRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthUserSelectAllRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthUserSelectAllRepValidationError{}
