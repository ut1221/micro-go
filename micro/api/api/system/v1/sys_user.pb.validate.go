// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/sys_user.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSysUserRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysUserRepMultiError, or nil if none found.
func (m *CreateSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSysUserRepMultiError(errors)
	}

	return nil
}

// CreateSysUserRepMultiError is an error wrapping multiple validation errors
// returned by CreateSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type CreateSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysUserRepMultiError) AllErrors() []error { return m }

// CreateSysUserRepValidationError is the validation error returned by
// CreateSysUserRep.Validate if the designated constraints aren't met.
type CreateSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysUserRepValidationError) ErrorName() string { return "CreateSysUserRepValidationError" }

// Error satisfies the builtin error interface
func (e CreateSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysUserRepValidationError{}

// Validate checks the field values on CreateSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSysUserReplyMultiError, or nil if none found.
func (m *CreateSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateSysUserReplyMultiError(errors)
	}

	return nil
}

// CreateSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by CreateSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type CreateSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSysUserReplyMultiError) AllErrors() []error { return m }

// CreateSysUserReplyValidationError is the validation error returned by
// CreateSysUserReply.Validate if the designated constraints aren't met.
type CreateSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSysUserReplyValidationError) ErrorName() string {
	return "CreateSysUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSysUserReplyValidationError{}

// Validate checks the field values on UpdateSysUserRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysUserRepMultiError, or nil if none found.
func (m *UpdateSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for DeptId

	// no validation rules for UserName

	// no validation rules for NickName

	// no validation rules for Password

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for Sex

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return UpdateSysUserRepMultiError(errors)
	}

	return nil
}

// UpdateSysUserRepMultiError is an error wrapping multiple validation errors
// returned by UpdateSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type UpdateSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysUserRepMultiError) AllErrors() []error { return m }

// UpdateSysUserRepValidationError is the validation error returned by
// UpdateSysUserRep.Validate if the designated constraints aren't met.
type UpdateSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysUserRepValidationError) ErrorName() string { return "UpdateSysUserRepValidationError" }

// Error satisfies the builtin error interface
func (e UpdateSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysUserRepValidationError{}

// Validate checks the field values on UpdateSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSysUserReplyMultiError, or nil if none found.
func (m *UpdateSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpdateSysUserReplyMultiError(errors)
	}

	return nil
}

// UpdateSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by UpdateSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type UpdateSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSysUserReplyMultiError) AllErrors() []error { return m }

// UpdateSysUserReplyValidationError is the validation error returned by
// UpdateSysUserReply.Validate if the designated constraints aren't met.
type UpdateSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSysUserReplyValidationError) ErrorName() string {
	return "UpdateSysUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSysUserReplyValidationError{}

// Validate checks the field values on ResetPwdRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetPwdRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPwdRep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetPwdRepMultiError, or
// nil if none found.
func (m *ResetPwdRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPwdRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for Password

	if len(errors) > 0 {
		return ResetPwdRepMultiError(errors)
	}

	return nil
}

// ResetPwdRepMultiError is an error wrapping multiple validation errors
// returned by ResetPwdRep.ValidateAll() if the designated constraints aren't met.
type ResetPwdRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPwdRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPwdRepMultiError) AllErrors() []error { return m }

// ResetPwdRepValidationError is the validation error returned by
// ResetPwdRep.Validate if the designated constraints aren't met.
type ResetPwdRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPwdRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPwdRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPwdRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPwdRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPwdRepValidationError) ErrorName() string { return "ResetPwdRepValidationError" }

// Error satisfies the builtin error interface
func (e ResetPwdRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPwdRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPwdRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPwdRepValidationError{}

// Validate checks the field values on ResetPwdReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResetPwdReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResetPwdReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResetPwdReplyMultiError, or
// nil if none found.
func (m *ResetPwdReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ResetPwdReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ResetPwdReplyMultiError(errors)
	}

	return nil
}

// ResetPwdReplyMultiError is an error wrapping multiple validation errors
// returned by ResetPwdReply.ValidateAll() if the designated constraints
// aren't met.
type ResetPwdReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResetPwdReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResetPwdReplyMultiError) AllErrors() []error { return m }

// ResetPwdReplyValidationError is the validation error returned by
// ResetPwdReply.Validate if the designated constraints aren't met.
type ResetPwdReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPwdReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPwdReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPwdReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPwdReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPwdReplyValidationError) ErrorName() string { return "ResetPwdReplyValidationError" }

// Error satisfies the builtin error interface
func (e ResetPwdReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPwdReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPwdReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPwdReplyValidationError{}

// Validate checks the field values on DeleteSysUserRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysUserRepMultiError, or nil if none found.
func (m *DeleteSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSysUserRepMultiError(errors)
	}

	return nil
}

// DeleteSysUserRepMultiError is an error wrapping multiple validation errors
// returned by DeleteSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type DeleteSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysUserRepMultiError) AllErrors() []error { return m }

// DeleteSysUserRepValidationError is the validation error returned by
// DeleteSysUserRep.Validate if the designated constraints aren't met.
type DeleteSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysUserRepValidationError) ErrorName() string { return "DeleteSysUserRepValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysUserRepValidationError{}

// Validate checks the field values on DeleteSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysUserReplyMultiError, or nil if none found.
func (m *DeleteSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(errors) > 0 {
		return DeleteSysUserReplyMultiError(errors)
	}

	return nil
}

// DeleteSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by DeleteSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type DeleteSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysUserReplyMultiError) AllErrors() []error { return m }

// DeleteSysUserReplyValidationError is the validation error returned by
// DeleteSysUserReply.Validate if the designated constraints aren't met.
type DeleteSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysUserReplyValidationError) ErrorName() string {
	return "DeleteSysUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysUserReplyValidationError{}

// Validate checks the field values on SaveSysUserRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SaveSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveSysUserRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SaveSysUserRepMultiError,
// or nil if none found.
func (m *SaveSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeptId

	// no validation rules for UserName

	// no validation rules for NickName

	if !_SaveSysUserRep_Password_Pattern.MatchString(m.GetPassword()) {
		err := SaveSysUserRepValidationError{
			field:  "Password",
			reason: "value does not match regex pattern \"(?i)^[0-9a-f]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PhoneNumber

	// no validation rules for Email

	// no validation rules for Sex

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return SaveSysUserRepMultiError(errors)
	}

	return nil
}

// SaveSysUserRepMultiError is an error wrapping multiple validation errors
// returned by SaveSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type SaveSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveSysUserRepMultiError) AllErrors() []error { return m }

// SaveSysUserRepValidationError is the validation error returned by
// SaveSysUserRep.Validate if the designated constraints aren't met.
type SaveSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveSysUserRepValidationError) ErrorName() string { return "SaveSysUserRepValidationError" }

// Error satisfies the builtin error interface
func (e SaveSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveSysUserRepValidationError{}

var _SaveSysUserRep_Password_Pattern = regexp.MustCompile("(?i)^[0-9a-f]+$")

// Validate checks the field values on SaveSysUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SaveSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SaveSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SaveSysUserReplyMultiError, or nil if none found.
func (m *SaveSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SaveSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SaveSysUserReplyMultiError(errors)
	}

	return nil
}

// SaveSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by SaveSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type SaveSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SaveSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SaveSysUserReplyMultiError) AllErrors() []error { return m }

// SaveSysUserReplyValidationError is the validation error returned by
// SaveSysUserReply.Validate if the designated constraints aren't met.
type SaveSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SaveSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SaveSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SaveSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SaveSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SaveSysUserReplyValidationError) ErrorName() string { return "SaveSysUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e SaveSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSaveSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SaveSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SaveSysUserReplyValidationError{}

// Validate checks the field values on GetSysUserRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysUserRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSysUserRepMultiError, or
// nil if none found.
func (m *GetSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSysUserRepMultiError(errors)
	}

	return nil
}

// GetSysUserRepMultiError is an error wrapping multiple validation errors
// returned by GetSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysUserRepMultiError) AllErrors() []error { return m }

// GetSysUserRepValidationError is the validation error returned by
// GetSysUserRep.Validate if the designated constraints aren't met.
type GetSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysUserRepValidationError) ErrorName() string { return "GetSysUserRepValidationError" }

// Error satisfies the builtin error interface
func (e GetSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysUserRepValidationError{}

// Validate checks the field values on GetSysUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysUserReplyMultiError, or nil if none found.
func (m *GetSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysUserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysUserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysUserReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysUserReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysUserReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysUserReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSysUserReplyMultiError(errors)
	}

	return nil
}

// GetSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by GetSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type GetSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysUserReplyMultiError) AllErrors() []error { return m }

// GetSysUserReplyValidationError is the validation error returned by
// GetSysUserReply.Validate if the designated constraints aren't met.
type GetSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysUserReplyValidationError) ErrorName() string { return "GetSysUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysUserReplyValidationError{}

// Validate checks the field values on GetOtherInfoRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOtherInfoRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOtherInfoRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOtherInfoRepMultiError, or nil if none found.
func (m *GetOtherInfoRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOtherInfoRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetOtherInfoRepMultiError(errors)
	}

	return nil
}

// GetOtherInfoRepMultiError is an error wrapping multiple validation errors
// returned by GetOtherInfoRep.ValidateAll() if the designated constraints
// aren't met.
type GetOtherInfoRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOtherInfoRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOtherInfoRepMultiError) AllErrors() []error { return m }

// GetOtherInfoRepValidationError is the validation error returned by
// GetOtherInfoRep.Validate if the designated constraints aren't met.
type GetOtherInfoRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOtherInfoRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOtherInfoRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOtherInfoRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOtherInfoRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOtherInfoRepValidationError) ErrorName() string { return "GetOtherInfoRepValidationError" }

// Error satisfies the builtin error interface
func (e GetOtherInfoRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOtherInfoRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOtherInfoRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOtherInfoRepValidationError{}

// Validate checks the field values on GetOtherInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOtherInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOtherInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOtherInfoReplyMultiError, or nil if none found.
func (m *GetOtherInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOtherInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOtherInfoReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOtherInfoReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOtherInfoReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPosts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetOtherInfoReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetOtherInfoReplyValidationError{
						field:  fmt.Sprintf("Posts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetOtherInfoReplyValidationError{
					field:  fmt.Sprintf("Posts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetOtherInfoReplyMultiError(errors)
	}

	return nil
}

// GetOtherInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GetOtherInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GetOtherInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOtherInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOtherInfoReplyMultiError) AllErrors() []error { return m }

// GetOtherInfoReplyValidationError is the validation error returned by
// GetOtherInfoReply.Validate if the designated constraints aren't met.
type GetOtherInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOtherInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOtherInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOtherInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOtherInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOtherInfoReplyValidationError) ErrorName() string {
	return "GetOtherInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetOtherInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOtherInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOtherInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOtherInfoReplyValidationError{}

// Validate checks the field values on ListSysUserRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysUserRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSysUserRepMultiError,
// or nil if none found.
func (m *ListSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := ListSysUserRepValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListSysUserRepValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DeptId

	// no validation rules for UserName

	// no validation rules for Status

	// no validation rules for PhoneNumber

	if all {
		switch v := interface{}(m.GetParams()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSysUserRepValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSysUserRepValidationError{
					field:  "Params",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetParams()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSysUserRepValidationError{
				field:  "Params",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSysUserRepMultiError(errors)
	}

	return nil
}

// ListSysUserRepMultiError is an error wrapping multiple validation errors
// returned by ListSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type ListSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysUserRepMultiError) AllErrors() []error { return m }

// ListSysUserRepValidationError is the validation error returned by
// ListSysUserRep.Validate if the designated constraints aren't met.
type ListSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysUserRepValidationError) ErrorName() string { return "ListSysUserRepValidationError" }

// Error satisfies the builtin error interface
func (e ListSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysUserRepValidationError{}

// Validate checks the field values on ListSysUserReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysUserReplyMultiError, or nil if none found.
func (m *ListSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysUserReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysUserReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysUserReplyValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysUserReplyMultiError(errors)
	}

	return nil
}

// ListSysUserReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysUserReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysUserReplyMultiError) AllErrors() []error { return m }

// ListSysUserReplyValidationError is the validation error returned by
// ListSysUserReply.Validate if the designated constraints aren't met.
type ListSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysUserReplyValidationError) ErrorName() string { return "ListSysUserReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysUserReplyValidationError{}

// Validate checks the field values on ListSysUser with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSysUser) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysUser with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSysUserMultiError, or
// nil if none found.
func (m *ListSysUser) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysUser) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSysUserValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSysUserValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSysUserValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDept()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListSysUserValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListSysUserValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSysUserValidationError{
				field:  "Dept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListSysUserMultiError(errors)
	}

	return nil
}

// ListSysUserMultiError is an error wrapping multiple validation errors
// returned by ListSysUser.ValidateAll() if the designated constraints aren't met.
type ListSysUserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysUserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysUserMultiError) AllErrors() []error { return m }

// ListSysUserValidationError is the validation error returned by
// ListSysUser.Validate if the designated constraints aren't met.
type ListSysUserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysUserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysUserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysUserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysUserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysUserValidationError) ErrorName() string { return "ListSysUserValidationError" }

// Error satisfies the builtin error interface
func (e ListSysUserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysUserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysUserValidationError{}

// Validate checks the field values on ProfileRep with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileRep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileRepMultiError, or
// nil if none found.
func (m *ProfileRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProfileRepMultiError(errors)
	}

	return nil
}

// ProfileRepMultiError is an error wrapping multiple validation errors
// returned by ProfileRep.ValidateAll() if the designated constraints aren't met.
type ProfileRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileRepMultiError) AllErrors() []error { return m }

// ProfileRepValidationError is the validation error returned by
// ProfileRep.Validate if the designated constraints aren't met.
type ProfileRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileRepValidationError) ErrorName() string { return "ProfileRepValidationError" }

// Error satisfies the builtin error interface
func (e ProfileRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileRepValidationError{}

// Validate checks the field values on ProfileReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileReplyMultiError, or
// nil if none found.
func (m *ProfileReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProfileReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProfileReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProfileReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProfileReplyMultiError(errors)
	}

	return nil
}

// ProfileReplyMultiError is an error wrapping multiple validation errors
// returned by ProfileReply.ValidateAll() if the designated constraints aren't met.
type ProfileReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileReplyMultiError) AllErrors() []error { return m }

// ProfileReplyValidationError is the validation error returned by
// ProfileReply.Validate if the designated constraints aren't met.
type ProfileReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileReplyValidationError) ErrorName() string { return "ProfileReplyValidationError" }

// Error satisfies the builtin error interface
func (e ProfileReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileReplyValidationError{}

// Validate checks the field values on GetAuthRoleSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthRoleSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthRoleSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthRoleSysUserRepMultiError, or nil if none found.
func (m *GetAuthRoleSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthRoleSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetAuthRoleSysUserRepMultiError(errors)
	}

	return nil
}

// GetAuthRoleSysUserRepMultiError is an error wrapping multiple validation
// errors returned by GetAuthRoleSysUserRep.ValidateAll() if the designated
// constraints aren't met.
type GetAuthRoleSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthRoleSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthRoleSysUserRepMultiError) AllErrors() []error { return m }

// GetAuthRoleSysUserRepValidationError is the validation error returned by
// GetAuthRoleSysUserRep.Validate if the designated constraints aren't met.
type GetAuthRoleSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthRoleSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthRoleSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthRoleSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthRoleSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthRoleSysUserRepValidationError) ErrorName() string {
	return "GetAuthRoleSysUserRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthRoleSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthRoleSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthRoleSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthRoleSysUserRepValidationError{}

// Validate checks the field values on GetAuthRoleSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAuthRoleSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAuthRoleSysUserReply with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAuthRoleSysUserReplyMultiError, or nil if none found.
func (m *GetAuthRoleSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAuthRoleSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetAuthRoleSysUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetAuthRoleSysUserReplyValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAuthRoleSysUserReplyValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAuthRoleSysUserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAuthRoleSysUserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAuthRoleSysUserReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAuthRoleSysUserReplyMultiError(errors)
	}

	return nil
}

// GetAuthRoleSysUserReplyMultiError is an error wrapping multiple validation
// errors returned by GetAuthRoleSysUserReply.ValidateAll() if the designated
// constraints aren't met.
type GetAuthRoleSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAuthRoleSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAuthRoleSysUserReplyMultiError) AllErrors() []error { return m }

// GetAuthRoleSysUserReplyValidationError is the validation error returned by
// GetAuthRoleSysUserReply.Validate if the designated constraints aren't met.
type GetAuthRoleSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAuthRoleSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAuthRoleSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAuthRoleSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAuthRoleSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAuthRoleSysUserReplyValidationError) ErrorName() string {
	return "GetAuthRoleSysUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAuthRoleSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAuthRoleSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAuthRoleSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAuthRoleSysUserReplyValidationError{}

// Validate checks the field values on AuthRoleSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRoleSysUserRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRoleSysUserRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRoleSysUserRepMultiError, or nil if none found.
func (m *AuthRoleSysUserRep) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRoleSysUserRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleIds

	// no validation rules for UserId

	if len(errors) > 0 {
		return AuthRoleSysUserRepMultiError(errors)
	}

	return nil
}

// AuthRoleSysUserRepMultiError is an error wrapping multiple validation errors
// returned by AuthRoleSysUserRep.ValidateAll() if the designated constraints
// aren't met.
type AuthRoleSysUserRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRoleSysUserRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRoleSysUserRepMultiError) AllErrors() []error { return m }

// AuthRoleSysUserRepValidationError is the validation error returned by
// AuthRoleSysUserRep.Validate if the designated constraints aren't met.
type AuthRoleSysUserRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRoleSysUserRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRoleSysUserRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRoleSysUserRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRoleSysUserRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRoleSysUserRepValidationError) ErrorName() string {
	return "AuthRoleSysUserRepValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRoleSysUserRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRoleSysUserRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRoleSysUserRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRoleSysUserRepValidationError{}

// Validate checks the field values on AuthRoleSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AuthRoleSysUserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRoleSysUserReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AuthRoleSysUserReplyMultiError, or nil if none found.
func (m *AuthRoleSysUserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRoleSysUserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AuthRoleSysUserReplyMultiError(errors)
	}

	return nil
}

// AuthRoleSysUserReplyMultiError is an error wrapping multiple validation
// errors returned by AuthRoleSysUserReply.ValidateAll() if the designated
// constraints aren't met.
type AuthRoleSysUserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRoleSysUserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRoleSysUserReplyMultiError) AllErrors() []error { return m }

// AuthRoleSysUserReplyValidationError is the validation error returned by
// AuthRoleSysUserReply.Validate if the designated constraints aren't met.
type AuthRoleSysUserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRoleSysUserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRoleSysUserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRoleSysUserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRoleSysUserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRoleSysUserReplyValidationError) ErrorName() string {
	return "AuthRoleSysUserReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AuthRoleSysUserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRoleSysUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRoleSysUserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRoleSysUserReplyValidationError{}
