// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/base.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptyReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *EmptyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in EmptyReplyMultiError, or
// nil if none found.
func (m *EmptyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptyReplyMultiError(errors)
	}

	return nil
}

// EmptyReplyMultiError is an error wrapping multiple validation errors
// returned by EmptyReply.ValidateAll() if the designated constraints aren't met.
type EmptyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptyReplyMultiError) AllErrors() []error { return m }

// EmptyReplyValidationError is the validation error returned by
// EmptyReply.Validate if the designated constraints aren't met.
type EmptyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyReplyValidationError) ErrorName() string { return "EmptyReplyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyReplyValidationError{}

// Validate checks the field values on UserReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserReplyMultiError, or nil
// if none found.
func (m *UserReply) ValidateAll() error {
	return m.validate(true)
}

func (m *UserReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remark

	// no validation rules for UserId

	// no validation rules for DeptId

	// no validation rules for UserName

	// no validation rules for NickName

	// no validation rules for Email

	// no validation rules for PhoneNumber

	// no validation rules for Sex

	// no validation rules for Avatar

	// no validation rules for Password

	// no validation rules for Status

	// no validation rules for DelFlag

	// no validation rules for LoginIp

	// no validation rules for LoginDate

	if all {
		switch v := interface{}(m.GetDept()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserReplyValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserReplyValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserReplyValidationError{
				field:  "Dept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Admin

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UserReplyValidationError{
						field:  fmt.Sprintf("Roles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UserReplyValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return UserReplyMultiError(errors)
	}

	return nil
}

// UserReplyMultiError is an error wrapping multiple validation errors returned
// by UserReply.ValidateAll() if the designated constraints aren't met.
type UserReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserReplyMultiError) AllErrors() []error { return m }

// UserReplyValidationError is the validation error returned by
// UserReply.Validate if the designated constraints aren't met.
type UserReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserReplyValidationError) ErrorName() string { return "UserReplyValidationError" }

// Error satisfies the builtin error interface
func (e UserReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserReplyValidationError{}

// Validate checks the field values on DeptReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeptReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeptReplyMultiError, or nil
// if none found.
func (m *DeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Remark

	// no validation rules for DeptId

	// no validation rules for ParentId

	// no validation rules for Ancestors

	// no validation rules for DeptName

	// no validation rules for OrderNum

	// no validation rules for Leader

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Status

	// no validation rules for ParentName

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeptReplyValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeptReplyValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeptReplyValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeptReplyMultiError(errors)
	}

	return nil
}

// DeptReplyMultiError is an error wrapping multiple validation errors returned
// by DeptReply.ValidateAll() if the designated constraints aren't met.
type DeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeptReplyMultiError) AllErrors() []error { return m }

// DeptReplyValidationError is the validation error returned by
// DeptReply.Validate if the designated constraints aren't met.
type DeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeptReplyValidationError) ErrorName() string { return "DeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeptReplyValidationError{}

// Validate checks the field values on RoleReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleReplyMultiError, or nil
// if none found.
func (m *RoleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remark

	// no validation rules for RoleId

	// no validation rules for RoleName

	// no validation rules for RoleKey

	// no validation rules for RoleSort

	// no validation rules for DataScope

	// no validation rules for MenuCheckStrictly

	// no validation rules for DeptCheckStrictly

	// no validation rules for Status

	// no validation rules for Flag

	// no validation rules for Admin

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return RoleReplyMultiError(errors)
	}

	return nil
}

// RoleReplyMultiError is an error wrapping multiple validation errors returned
// by RoleReply.ValidateAll() if the designated constraints aren't met.
type RoleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleReplyMultiError) AllErrors() []error { return m }

// RoleReplyValidationError is the validation error returned by
// RoleReply.Validate if the designated constraints aren't met.
type RoleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleReplyValidationError) ErrorName() string { return "RoleReplyValidationError" }

// Error satisfies the builtin error interface
func (e RoleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleReplyValidationError{}

// Validate checks the field values on PostReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PostReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PostReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PostReplyMultiError, or nil
// if none found.
func (m *PostReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PostReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Remark

	// no validation rules for PostId

	// no validation rules for PostCode

	// no validation rules for PostName

	// no validation rules for PostSort

	// no validation rules for Status

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return PostReplyMultiError(errors)
	}

	return nil
}

// PostReplyMultiError is an error wrapping multiple validation errors returned
// by PostReply.ValidateAll() if the designated constraints aren't met.
type PostReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PostReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PostReplyMultiError) AllErrors() []error { return m }

// PostReplyValidationError is the validation error returned by
// PostReply.Validate if the designated constraints aren't met.
type PostReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PostReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PostReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PostReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PostReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PostReplyValidationError) ErrorName() string { return "PostReplyValidationError" }

// Error satisfies the builtin error interface
func (e PostReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPostReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PostReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PostReplyValidationError{}

// Validate checks the field values on TimeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TimeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeReq with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TimeReqMultiError, or nil if none found.
func (m *TimeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BeginTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return TimeReqMultiError(errors)
	}

	return nil
}

// TimeReqMultiError is an error wrapping multiple validation errors returned
// by TimeReq.ValidateAll() if the designated constraints aren't met.
type TimeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeReqMultiError) AllErrors() []error { return m }

// TimeReqValidationError is the validation error returned by TimeReq.Validate
// if the designated constraints aren't met.
type TimeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeReqValidationError) ErrorName() string { return "TimeReqValidationError" }

// Error satisfies the builtin error interface
func (e TimeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeReqValidationError{}
