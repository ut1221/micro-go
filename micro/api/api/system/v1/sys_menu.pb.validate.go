// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/sys_menu.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysMenuRep with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysMenuRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysMenuRep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysMenuRepMultiError, or
// nil if none found.
func (m *SysMenuRep) ValidateAll() error {
	return m.validate(true)
}

func (m *SysMenuRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MenuId

	// no validation rules for ParentId

	// no validation rules for MenuName

	// no validation rules for Icon

	// no validation rules for MenuType

	// no validation rules for OrderNum

	// no validation rules for IsFrame

	// no validation rules for IsCache

	// no validation rules for Visible

	// no validation rules for Status

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for Perms

	// no validation rules for Query

	if len(errors) > 0 {
		return SysMenuRepMultiError(errors)
	}

	return nil
}

// SysMenuRepMultiError is an error wrapping multiple validation errors
// returned by SysMenuRep.ValidateAll() if the designated constraints aren't met.
type SysMenuRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysMenuRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysMenuRepMultiError) AllErrors() []error { return m }

// SysMenuRepValidationError is the validation error returned by
// SysMenuRep.Validate if the designated constraints aren't met.
type SysMenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysMenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysMenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysMenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysMenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysMenuRepValidationError) ErrorName() string { return "SysMenuRepValidationError" }

// Error satisfies the builtin error interface
func (e SysMenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysMenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysMenuRepValidationError{}

// Validate checks the field values on DeleteSysMenuRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysMenuRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysMenuRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysMenuRepMultiError, or nil if none found.
func (m *DeleteSysMenuRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysMenuRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteSysMenuRepValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSysMenuRepMultiError(errors)
	}

	return nil
}

// DeleteSysMenuRepMultiError is an error wrapping multiple validation errors
// returned by DeleteSysMenuRep.ValidateAll() if the designated constraints
// aren't met.
type DeleteSysMenuRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysMenuRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysMenuRepMultiError) AllErrors() []error { return m }

// DeleteSysMenuRepValidationError is the validation error returned by
// DeleteSysMenuRep.Validate if the designated constraints aren't met.
type DeleteSysMenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysMenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysMenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysMenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysMenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysMenuRepValidationError) ErrorName() string { return "DeleteSysMenuRepValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSysMenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysMenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysMenuRepValidationError{}

// Validate checks the field values on GetSysMenuRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSysMenuRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysMenuRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSysMenuRepMultiError, or
// nil if none found.
func (m *GetSysMenuRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysMenuRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetSysMenuRepValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSysMenuRepMultiError(errors)
	}

	return nil
}

// GetSysMenuRepMultiError is an error wrapping multiple validation errors
// returned by GetSysMenuRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysMenuRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysMenuRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysMenuRepMultiError) AllErrors() []error { return m }

// GetSysMenuRepValidationError is the validation error returned by
// GetSysMenuRep.Validate if the designated constraints aren't met.
type GetSysMenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysMenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysMenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysMenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysMenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysMenuRepValidationError) ErrorName() string { return "GetSysMenuRepValidationError" }

// Error satisfies the builtin error interface
func (e GetSysMenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysMenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysMenuRepValidationError{}

// Validate checks the field values on GetSysMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysMenuReplyMultiError, or nil if none found.
func (m *GetSysMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMenu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysMenuReplyValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysMenuReplyValidationError{
					field:  "Menu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMenu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysMenuReplyValidationError{
				field:  "Menu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysMenuReplyMultiError(errors)
	}

	return nil
}

// GetSysMenuReplyMultiError is an error wrapping multiple validation errors
// returned by GetSysMenuReply.ValidateAll() if the designated constraints
// aren't met.
type GetSysMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysMenuReplyMultiError) AllErrors() []error { return m }

// GetSysMenuReplyValidationError is the validation error returned by
// GetSysMenuReply.Validate if the designated constraints aren't met.
type GetSysMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysMenuReplyValidationError) ErrorName() string { return "GetSysMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSysMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysMenuReplyValidationError{}

// Validate checks the field values on ListSysMenuRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSysMenuRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysMenuRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSysMenuRepMultiError,
// or nil if none found.
func (m *ListSysMenuRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysMenuRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSysMenuRepMultiError(errors)
	}

	return nil
}

// ListSysMenuRepMultiError is an error wrapping multiple validation errors
// returned by ListSysMenuRep.ValidateAll() if the designated constraints
// aren't met.
type ListSysMenuRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysMenuRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysMenuRepMultiError) AllErrors() []error { return m }

// ListSysMenuRepValidationError is the validation error returned by
// ListSysMenuRep.Validate if the designated constraints aren't met.
type ListSysMenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysMenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysMenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysMenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysMenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysMenuRepValidationError) ErrorName() string { return "ListSysMenuRepValidationError" }

// Error satisfies the builtin error interface
func (e ListSysMenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysMenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysMenuRepValidationError{}

// Validate checks the field values on ListSysMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysMenuReplyMultiError, or nil if none found.
func (m *ListSysMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysMenuReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysMenuReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysMenuReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysMenuReplyMultiError(errors)
	}

	return nil
}

// ListSysMenuReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysMenuReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysMenuReplyMultiError) AllErrors() []error { return m }

// ListSysMenuReplyValidationError is the validation error returned by
// ListSysMenuReply.Validate if the designated constraints aren't met.
type ListSysMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysMenuReplyValidationError) ErrorName() string { return "ListSysMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysMenuReplyValidationError{}

// Validate checks the field values on GetSysRoleMenuRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleMenuRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleMenuRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleMenuRepMultiError, or nil if none found.
func (m *GetSysRoleMenuRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleMenuRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetRoleId()) < 1 {
		err := GetSysRoleMenuRepValidationError{
			field:  "RoleId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSysRoleMenuRepMultiError(errors)
	}

	return nil
}

// GetSysRoleMenuRepMultiError is an error wrapping multiple validation errors
// returned by GetSysRoleMenuRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysRoleMenuRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleMenuRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleMenuRepMultiError) AllErrors() []error { return m }

// GetSysRoleMenuRepValidationError is the validation error returned by
// GetSysRoleMenuRep.Validate if the designated constraints aren't met.
type GetSysRoleMenuRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleMenuRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleMenuRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleMenuRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleMenuRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleMenuRepValidationError) ErrorName() string {
	return "GetSysRoleMenuRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleMenuRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleMenuRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleMenuRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleMenuRepValidationError{}

// Validate checks the field values on GetSysRoleMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleMenuReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleMenuReplyMultiError, or nil if none found.
func (m *GetSysRoleMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysRoleMenuReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysRoleMenuReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysRoleMenuReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSysRoleMenuReplyMultiError(errors)
	}

	return nil
}

// GetSysRoleMenuReplyMultiError is an error wrapping multiple validation
// errors returned by GetSysRoleMenuReply.ValidateAll() if the designated
// constraints aren't met.
type GetSysRoleMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleMenuReplyMultiError) AllErrors() []error { return m }

// GetSysRoleMenuReplyValidationError is the validation error returned by
// GetSysRoleMenuReply.Validate if the designated constraints aren't met.
type GetSysRoleMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleMenuReplyValidationError) ErrorName() string {
	return "GetSysRoleMenuReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleMenuReplyValidationError{}

// Validate checks the field values on RoleMenuReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RoleMenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RoleMenuReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RoleMenuReplyMultiError, or
// nil if none found.
func (m *RoleMenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RoleMenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Label

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleMenuReplyValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleMenuReplyValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleMenuReplyValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RoleMenuReplyMultiError(errors)
	}

	return nil
}

// RoleMenuReplyMultiError is an error wrapping multiple validation errors
// returned by RoleMenuReply.ValidateAll() if the designated constraints
// aren't met.
type RoleMenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMenuReplyMultiError) AllErrors() []error { return m }

// RoleMenuReplyValidationError is the validation error returned by
// RoleMenuReply.Validate if the designated constraints aren't met.
type RoleMenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleMenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleMenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleMenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleMenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleMenuReplyValidationError) ErrorName() string { return "RoleMenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e RoleMenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRoleMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleMenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleMenuReplyValidationError{}

// Validate checks the field values on MenuReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MenuReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MenuReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MenuReplyMultiError, or nil
// if none found.
func (m *MenuReply) ValidateAll() error {
	return m.validate(true)
}

func (m *MenuReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for Remark

	// no validation rules for MenuId

	// no validation rules for MenuName

	// no validation rules for ParentName

	// no validation rules for ParentId

	// no validation rules for OrderNum

	// no validation rules for Path

	// no validation rules for Component

	// no validation rules for Query

	// no validation rules for IsFrame

	// no validation rules for IsCache

	// no validation rules for MenuType

	// no validation rules for Visible

	// no validation rules for Status

	// no validation rules for Perms

	// no validation rules for Icon

	if len(errors) > 0 {
		return MenuReplyMultiError(errors)
	}

	return nil
}

// MenuReplyMultiError is an error wrapping multiple validation errors returned
// by MenuReply.ValidateAll() if the designated constraints aren't met.
type MenuReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MenuReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MenuReplyMultiError) AllErrors() []error { return m }

// MenuReplyValidationError is the validation error returned by
// MenuReply.Validate if the designated constraints aren't met.
type MenuReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MenuReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MenuReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MenuReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MenuReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MenuReplyValidationError) ErrorName() string { return "MenuReplyValidationError" }

// Error satisfies the builtin error interface
func (e MenuReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMenuReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MenuReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MenuReplyValidationError{}

// Validate checks the field values on GetTreeSelectRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTreeSelectRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTreeSelectRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTreeSelectRepMultiError, or nil if none found.
func (m *GetTreeSelectRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTreeSelectRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetTreeSelectRepMultiError(errors)
	}

	return nil
}

// GetTreeSelectRepMultiError is an error wrapping multiple validation errors
// returned by GetTreeSelectRep.ValidateAll() if the designated constraints
// aren't met.
type GetTreeSelectRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTreeSelectRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTreeSelectRepMultiError) AllErrors() []error { return m }

// GetTreeSelectRepValidationError is the validation error returned by
// GetTreeSelectRep.Validate if the designated constraints aren't met.
type GetTreeSelectRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTreeSelectRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTreeSelectRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTreeSelectRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTreeSelectRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTreeSelectRepValidationError) ErrorName() string { return "GetTreeSelectRepValidationError" }

// Error satisfies the builtin error interface
func (e GetTreeSelectRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTreeSelectRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTreeSelectRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTreeSelectRepValidationError{}

// Validate checks the field values on GetTreeSelectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTreeSelectReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTreeSelectReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTreeSelectReplyMultiError, or nil if none found.
func (m *GetTreeSelectReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTreeSelectReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMenus() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTreeSelectReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTreeSelectReplyValidationError{
						field:  fmt.Sprintf("Menus[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTreeSelectReplyValidationError{
					field:  fmt.Sprintf("Menus[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTreeSelectReplyMultiError(errors)
	}

	return nil
}

// GetTreeSelectReplyMultiError is an error wrapping multiple validation errors
// returned by GetTreeSelectReply.ValidateAll() if the designated constraints
// aren't met.
type GetTreeSelectReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTreeSelectReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTreeSelectReplyMultiError) AllErrors() []error { return m }

// GetTreeSelectReplyValidationError is the validation error returned by
// GetTreeSelectReply.Validate if the designated constraints aren't met.
type GetTreeSelectReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTreeSelectReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTreeSelectReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTreeSelectReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTreeSelectReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTreeSelectReplyValidationError) ErrorName() string {
	return "GetTreeSelectReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetTreeSelectReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTreeSelectReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTreeSelectReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTreeSelectReplyValidationError{}
