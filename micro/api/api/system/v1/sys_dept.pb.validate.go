// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/sys_dept.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SysDeptRep with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDeptRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDeptRep with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDeptRepMultiError, or
// nil if none found.
func (m *SysDeptRep) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDeptRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeptId

	// no validation rules for ParentId

	// no validation rules for DeptName

	// no validation rules for OrderNum

	// no validation rules for Leader

	// no validation rules for Phone

	// no validation rules for Email

	// no validation rules for Status

	if len(errors) > 0 {
		return SysDeptRepMultiError(errors)
	}

	return nil
}

// SysDeptRepMultiError is an error wrapping multiple validation errors
// returned by SysDeptRep.ValidateAll() if the designated constraints aren't met.
type SysDeptRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDeptRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDeptRepMultiError) AllErrors() []error { return m }

// SysDeptRepValidationError is the validation error returned by
// SysDeptRep.Validate if the designated constraints aren't met.
type SysDeptRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDeptRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDeptRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDeptRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDeptRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDeptRepValidationError) ErrorName() string { return "SysDeptRepValidationError" }

// Error satisfies the builtin error interface
func (e SysDeptRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDeptRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDeptRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDeptRepValidationError{}

// Validate checks the field values on DeleteSysDeptRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysDeptRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysDeptRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysDeptRepMultiError, or nil if none found.
func (m *DeleteSysDeptRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysDeptRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSysDeptRepMultiError(errors)
	}

	return nil
}

// DeleteSysDeptRepMultiError is an error wrapping multiple validation errors
// returned by DeleteSysDeptRep.ValidateAll() if the designated constraints
// aren't met.
type DeleteSysDeptRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysDeptRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysDeptRepMultiError) AllErrors() []error { return m }

// DeleteSysDeptRepValidationError is the validation error returned by
// DeleteSysDeptRep.Validate if the designated constraints aren't met.
type DeleteSysDeptRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysDeptRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysDeptRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysDeptRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysDeptRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysDeptRepValidationError) ErrorName() string { return "DeleteSysDeptRepValidationError" }

// Error satisfies the builtin error interface
func (e DeleteSysDeptRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysDeptRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysDeptRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysDeptRepValidationError{}

// Validate checks the field values on GetSysDeptRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSysDeptRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysDeptRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSysDeptRepMultiError, or
// nil if none found.
func (m *GetSysDeptRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysDeptRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := GetSysDeptRepValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetSysDeptRepMultiError(errors)
	}

	return nil
}

// GetSysDeptRepMultiError is an error wrapping multiple validation errors
// returned by GetSysDeptRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysDeptRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysDeptRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysDeptRepMultiError) AllErrors() []error { return m }

// GetSysDeptRepValidationError is the validation error returned by
// GetSysDeptRep.Validate if the designated constraints aren't met.
type GetSysDeptRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysDeptRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysDeptRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysDeptRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysDeptRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysDeptRepValidationError) ErrorName() string { return "GetSysDeptRepValidationError" }

// Error satisfies the builtin error interface
func (e GetSysDeptRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysDeptRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysDeptRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysDeptRepValidationError{}

// Validate checks the field values on GetSysDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysDeptReplyMultiError, or nil if none found.
func (m *GetSysDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDept()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysDeptReplyValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysDeptReplyValidationError{
					field:  "Dept",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDept()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysDeptReplyValidationError{
				field:  "Dept",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysDeptReplyMultiError(errors)
	}

	return nil
}

// GetSysDeptReplyMultiError is an error wrapping multiple validation errors
// returned by GetSysDeptReply.ValidateAll() if the designated constraints
// aren't met.
type GetSysDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysDeptReplyMultiError) AllErrors() []error { return m }

// GetSysDeptReplyValidationError is the validation error returned by
// GetSysDeptReply.Validate if the designated constraints aren't met.
type GetSysDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysDeptReplyValidationError) ErrorName() string { return "GetSysDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetSysDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysDeptReplyValidationError{}

// Validate checks the field values on ExcludeDeptRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExcludeDeptRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExcludeDeptRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExcludeDeptRepMultiError,
// or nil if none found.
func (m *ExcludeDeptRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ExcludeDeptRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := ExcludeDeptRepValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExcludeDeptRepMultiError(errors)
	}

	return nil
}

// ExcludeDeptRepMultiError is an error wrapping multiple validation errors
// returned by ExcludeDeptRep.ValidateAll() if the designated constraints
// aren't met.
type ExcludeDeptRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExcludeDeptRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExcludeDeptRepMultiError) AllErrors() []error { return m }

// ExcludeDeptRepValidationError is the validation error returned by
// ExcludeDeptRep.Validate if the designated constraints aren't met.
type ExcludeDeptRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExcludeDeptRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExcludeDeptRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExcludeDeptRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExcludeDeptRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExcludeDeptRepValidationError) ErrorName() string { return "ExcludeDeptRepValidationError" }

// Error satisfies the builtin error interface
func (e ExcludeDeptRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExcludeDeptRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExcludeDeptRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExcludeDeptRepValidationError{}

// Validate checks the field values on DeptTreeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeptTreeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeptTreeReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeptTreeReqMultiError, or
// nil if none found.
func (m *DeptTreeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeptTreeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeptTreeReqMultiError(errors)
	}

	return nil
}

// DeptTreeReqMultiError is an error wrapping multiple validation errors
// returned by DeptTreeReq.ValidateAll() if the designated constraints aren't met.
type DeptTreeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeptTreeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeptTreeReqMultiError) AllErrors() []error { return m }

// DeptTreeReqValidationError is the validation error returned by
// DeptTreeReq.Validate if the designated constraints aren't met.
type DeptTreeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeptTreeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeptTreeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeptTreeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeptTreeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeptTreeReqValidationError) ErrorName() string { return "DeptTreeReqValidationError" }

// Error satisfies the builtin error interface
func (e DeptTreeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeptTreeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeptTreeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeptTreeReqValidationError{}

// Validate checks the field values on DeptTreeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeptTreeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeptTreeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeptTreeReplyMultiError, or
// nil if none found.
func (m *DeptTreeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DeptTreeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDept() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeptTreeReplyValidationError{
						field:  fmt.Sprintf("Dept[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeptTreeReplyValidationError{
						field:  fmt.Sprintf("Dept[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeptTreeReplyValidationError{
					field:  fmt.Sprintf("Dept[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeptTreeReplyMultiError(errors)
	}

	return nil
}

// DeptTreeReplyMultiError is an error wrapping multiple validation errors
// returned by DeptTreeReply.ValidateAll() if the designated constraints
// aren't met.
type DeptTreeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeptTreeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeptTreeReplyMultiError) AllErrors() []error { return m }

// DeptTreeReplyValidationError is the validation error returned by
// DeptTreeReply.Validate if the designated constraints aren't met.
type DeptTreeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeptTreeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeptTreeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeptTreeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeptTreeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeptTreeReplyValidationError) ErrorName() string { return "DeptTreeReplyValidationError" }

// Error satisfies the builtin error interface
func (e DeptTreeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeptTreeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeptTreeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeptTreeReplyValidationError{}

// Validate checks the field values on DeptTree with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeptTree) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeptTree with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeptTreeMultiError, or nil
// if none found.
func (m *DeptTree) ValidateAll() error {
	return m.validate(true)
}

func (m *DeptTree) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Pid

	// no validation rules for Label

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeptTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeptTreeValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeptTreeValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeptTreeMultiError(errors)
	}

	return nil
}

// DeptTreeMultiError is an error wrapping multiple validation errors returned
// by DeptTree.ValidateAll() if the designated constraints aren't met.
type DeptTreeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeptTreeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeptTreeMultiError) AllErrors() []error { return m }

// DeptTreeValidationError is the validation error returned by
// DeptTree.Validate if the designated constraints aren't met.
type DeptTreeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeptTreeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeptTreeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeptTreeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeptTreeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeptTreeValidationError) ErrorName() string { return "DeptTreeValidationError" }

// Error satisfies the builtin error interface
func (e DeptTreeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeptTree.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeptTreeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeptTreeValidationError{}

// Validate checks the field values on ListSysDeptRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListSysDeptRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysDeptRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListSysDeptRepMultiError,
// or nil if none found.
func (m *ListSysDeptRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysDeptRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSysDeptRepMultiError(errors)
	}

	return nil
}

// ListSysDeptRepMultiError is an error wrapping multiple validation errors
// returned by ListSysDeptRep.ValidateAll() if the designated constraints
// aren't met.
type ListSysDeptRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysDeptRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysDeptRepMultiError) AllErrors() []error { return m }

// ListSysDeptRepValidationError is the validation error returned by
// ListSysDeptRep.Validate if the designated constraints aren't met.
type ListSysDeptRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysDeptRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysDeptRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysDeptRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysDeptRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysDeptRepValidationError) ErrorName() string { return "ListSysDeptRepValidationError" }

// Error satisfies the builtin error interface
func (e ListSysDeptRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysDeptRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysDeptRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysDeptRepValidationError{}

// Validate checks the field values on ListSysDeptReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListSysDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysDeptReplyMultiError, or nil if none found.
func (m *ListSysDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDept() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysDeptReplyValidationError{
						field:  fmt.Sprintf("Dept[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysDeptReplyValidationError{
						field:  fmt.Sprintf("Dept[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysDeptReplyValidationError{
					field:  fmt.Sprintf("Dept[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysDeptReplyMultiError(errors)
	}

	return nil
}

// ListSysDeptReplyMultiError is an error wrapping multiple validation errors
// returned by ListSysDeptReply.ValidateAll() if the designated constraints
// aren't met.
type ListSysDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysDeptReplyMultiError) AllErrors() []error { return m }

// ListSysDeptReplyValidationError is the validation error returned by
// ListSysDeptReply.Validate if the designated constraints aren't met.
type ListSysDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysDeptReplyValidationError) ErrorName() string { return "ListSysDeptReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListSysDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysDeptReplyValidationError{}

// Validate checks the field values on GetSysRoleDeptRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleDeptRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleDeptRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleDeptRepMultiError, or nil if none found.
func (m *GetSysRoleDeptRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleDeptRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	if len(errors) > 0 {
		return GetSysRoleDeptRepMultiError(errors)
	}

	return nil
}

// GetSysRoleDeptRepMultiError is an error wrapping multiple validation errors
// returned by GetSysRoleDeptRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysRoleDeptRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleDeptRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleDeptRepMultiError) AllErrors() []error { return m }

// GetSysRoleDeptRepValidationError is the validation error returned by
// GetSysRoleDeptRep.Validate if the designated constraints aren't met.
type GetSysRoleDeptRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleDeptRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleDeptRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleDeptRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleDeptRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleDeptRepValidationError) ErrorName() string {
	return "GetSysRoleDeptRepValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleDeptRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleDeptRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleDeptRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleDeptRepValidationError{}

// Validate checks the field values on GetSysRoleDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysRoleDeptReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysRoleDeptReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysRoleDeptReplyMultiError, or nil if none found.
func (m *GetSysRoleDeptReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysRoleDeptReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDept() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetSysRoleDeptReplyValidationError{
						field:  fmt.Sprintf("Dept[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetSysRoleDeptReplyValidationError{
						field:  fmt.Sprintf("Dept[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetSysRoleDeptReplyValidationError{
					field:  fmt.Sprintf("Dept[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetSysRoleDeptReplyMultiError(errors)
	}

	return nil
}

// GetSysRoleDeptReplyMultiError is an error wrapping multiple validation
// errors returned by GetSysRoleDeptReply.ValidateAll() if the designated
// constraints aren't met.
type GetSysRoleDeptReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysRoleDeptReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysRoleDeptReplyMultiError) AllErrors() []error { return m }

// GetSysRoleDeptReplyValidationError is the validation error returned by
// GetSysRoleDeptReply.Validate if the designated constraints aren't met.
type GetSysRoleDeptReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysRoleDeptReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysRoleDeptReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysRoleDeptReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysRoleDeptReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysRoleDeptReplyValidationError) ErrorName() string {
	return "GetSysRoleDeptReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysRoleDeptReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysRoleDeptReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysRoleDeptReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysRoleDeptReplyValidationError{}
