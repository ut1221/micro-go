// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/system/v1/sys_dict.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on EmptySysDictReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EmptySysDictReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EmptySysDictReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EmptySysDictReplyMultiError, or nil if none found.
func (m *EmptySysDictReply) ValidateAll() error {
	return m.validate(true)
}

func (m *EmptySysDictReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return EmptySysDictReplyMultiError(errors)
	}

	return nil
}

// EmptySysDictReplyMultiError is an error wrapping multiple validation errors
// returned by EmptySysDictReply.ValidateAll() if the designated constraints
// aren't met.
type EmptySysDictReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EmptySysDictReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EmptySysDictReplyMultiError) AllErrors() []error { return m }

// EmptySysDictReplyValidationError is the validation error returned by
// EmptySysDictReply.Validate if the designated constraints aren't met.
type EmptySysDictReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptySysDictReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptySysDictReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptySysDictReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptySysDictReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptySysDictReplyValidationError) ErrorName() string {
	return "EmptySysDictReplyValidationError"
}

// Error satisfies the builtin error interface
func (e EmptySysDictReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmptySysDictReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptySysDictReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptySysDictReplyValidationError{}

// Validate checks the field values on SysDictDataTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysDictDataTypeReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDictDataTypeReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDictDataTypeReqMultiError, or nil if none found.
func (m *SysDictDataTypeReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDictDataTypeReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if len(errors) > 0 {
		return SysDictDataTypeReqMultiError(errors)
	}

	return nil
}

// SysDictDataTypeReqMultiError is an error wrapping multiple validation errors
// returned by SysDictDataTypeReq.ValidateAll() if the designated constraints
// aren't met.
type SysDictDataTypeReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDictDataTypeReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDictDataTypeReqMultiError) AllErrors() []error { return m }

// SysDictDataTypeReqValidationError is the validation error returned by
// SysDictDataTypeReq.Validate if the designated constraints aren't met.
type SysDictDataTypeReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDictDataTypeReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDictDataTypeReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDictDataTypeReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDictDataTypeReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDictDataTypeReqValidationError) ErrorName() string {
	return "SysDictDataTypeReqValidationError"
}

// Error satisfies the builtin error interface
func (e SysDictDataTypeReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDictDataTypeReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDictDataTypeReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDictDataTypeReqValidationError{}

// Validate checks the field values on SysDictDataTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SysDictDataTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDictDataTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SysDictDataTypeReplyMultiError, or nil if none found.
func (m *SysDictDataTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDictDataTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDict() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SysDictDataTypeReplyValidationError{
						field:  fmt.Sprintf("Dict[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SysDictDataTypeReplyValidationError{
						field:  fmt.Sprintf("Dict[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SysDictDataTypeReplyValidationError{
					field:  fmt.Sprintf("Dict[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SysDictDataTypeReplyMultiError(errors)
	}

	return nil
}

// SysDictDataTypeReplyMultiError is an error wrapping multiple validation
// errors returned by SysDictDataTypeReply.ValidateAll() if the designated
// constraints aren't met.
type SysDictDataTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDictDataTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDictDataTypeReplyMultiError) AllErrors() []error { return m }

// SysDictDataTypeReplyValidationError is the validation error returned by
// SysDictDataTypeReply.Validate if the designated constraints aren't met.
type SysDictDataTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDictDataTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDictDataTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDictDataTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDictDataTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDictDataTypeReplyValidationError) ErrorName() string {
	return "SysDictDataTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e SysDictDataTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDictDataTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDictDataTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDictDataTypeReplyValidationError{}

// Validate checks the field values on SysDictTypeRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDictTypeRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDictTypeRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDictTypeRepMultiError,
// or nil if none found.
func (m *SysDictTypeRep) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDictTypeRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	// no validation rules for DictName

	// no validation rules for DictType

	// no validation rules for Status

	// no validation rules for Remark

	if len(errors) > 0 {
		return SysDictTypeRepMultiError(errors)
	}

	return nil
}

// SysDictTypeRepMultiError is an error wrapping multiple validation errors
// returned by SysDictTypeRep.ValidateAll() if the designated constraints
// aren't met.
type SysDictTypeRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDictTypeRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDictTypeRepMultiError) AllErrors() []error { return m }

// SysDictTypeRepValidationError is the validation error returned by
// SysDictTypeRep.Validate if the designated constraints aren't met.
type SysDictTypeRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDictTypeRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDictTypeRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDictTypeRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDictTypeRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDictTypeRepValidationError) ErrorName() string { return "SysDictTypeRepValidationError" }

// Error satisfies the builtin error interface
func (e SysDictTypeRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDictTypeRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDictTypeRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDictTypeRepValidationError{}

// Validate checks the field values on DeleteSysDictTypeRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysDictTypeRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysDictTypeRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysDictTypeRepMultiError, or nil if none found.
func (m *DeleteSysDictTypeRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysDictTypeRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSysDictTypeRepMultiError(errors)
	}

	return nil
}

// DeleteSysDictTypeRepMultiError is an error wrapping multiple validation
// errors returned by DeleteSysDictTypeRep.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysDictTypeRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysDictTypeRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysDictTypeRepMultiError) AllErrors() []error { return m }

// DeleteSysDictTypeRepValidationError is the validation error returned by
// DeleteSysDictTypeRep.Validate if the designated constraints aren't met.
type DeleteSysDictTypeRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysDictTypeRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysDictTypeRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysDictTypeRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysDictTypeRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysDictTypeRepValidationError) ErrorName() string {
	return "DeleteSysDictTypeRepValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysDictTypeRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysDictTypeRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysDictTypeRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysDictTypeRepValidationError{}

// Validate checks the field values on GetSysDictRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetSysDictRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysDictRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetSysDictRepMultiError, or
// nil if none found.
func (m *GetSysDictRep) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysDictRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSysDictRepMultiError(errors)
	}

	return nil
}

// GetSysDictRepMultiError is an error wrapping multiple validation errors
// returned by GetSysDictRep.ValidateAll() if the designated constraints
// aren't met.
type GetSysDictRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysDictRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysDictRepMultiError) AllErrors() []error { return m }

// GetSysDictRepValidationError is the validation error returned by
// GetSysDictRep.Validate if the designated constraints aren't met.
type GetSysDictRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysDictRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysDictRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysDictRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysDictRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysDictRepValidationError) ErrorName() string { return "GetSysDictRepValidationError" }

// Error satisfies the builtin error interface
func (e GetSysDictRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysDictRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysDictRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysDictRepValidationError{}

// Validate checks the field values on GetSysDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysDictTypeReplyMultiError, or nil if none found.
func (m *GetSysDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysDictTypeReplyValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysDictTypeReplyValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysDictTypeReplyValidationError{
				field:  "Dict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysDictTypeReplyMultiError(errors)
	}

	return nil
}

// GetSysDictTypeReplyMultiError is an error wrapping multiple validation
// errors returned by GetSysDictTypeReply.ValidateAll() if the designated
// constraints aren't met.
type GetSysDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysDictTypeReplyMultiError) AllErrors() []error { return m }

// GetSysDictTypeReplyValidationError is the validation error returned by
// GetSysDictTypeReply.Validate if the designated constraints aren't met.
type GetSysDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysDictTypeReplyValidationError) ErrorName() string {
	return "GetSysDictTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysDictTypeReplyValidationError{}

// Validate checks the field values on GetSysDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetSysDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSysDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSysDictDataReplyMultiError, or nil if none found.
func (m *GetSysDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSysDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDict()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSysDictDataReplyValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSysDictDataReplyValidationError{
					field:  "Dict",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDict()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSysDictDataReplyValidationError{
				field:  "Dict",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSysDictDataReplyMultiError(errors)
	}

	return nil
}

// GetSysDictDataReplyMultiError is an error wrapping multiple validation
// errors returned by GetSysDictDataReply.ValidateAll() if the designated
// constraints aren't met.
type GetSysDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSysDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSysDictDataReplyMultiError) AllErrors() []error { return m }

// GetSysDictDataReplyValidationError is the validation error returned by
// GetSysDictDataReply.Validate if the designated constraints aren't met.
type GetSysDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSysDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSysDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSysDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSysDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSysDictDataReplyValidationError) ErrorName() string {
	return "GetSysDictDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetSysDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSysDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSysDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSysDictDataReplyValidationError{}

// Validate checks the field values on ListSysDictTypeRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysDictTypeRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysDictTypeRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysDictTypeRepMultiError, or nil if none found.
func (m *ListSysDictTypeRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysDictTypeRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := ListSysDictTypeRepValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListSysDictTypeRepValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListSysDictTypeRepMultiError(errors)
	}

	return nil
}

// ListSysDictTypeRepMultiError is an error wrapping multiple validation errors
// returned by ListSysDictTypeRep.ValidateAll() if the designated constraints
// aren't met.
type ListSysDictTypeRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysDictTypeRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysDictTypeRepMultiError) AllErrors() []error { return m }

// ListSysDictTypeRepValidationError is the validation error returned by
// ListSysDictTypeRep.Validate if the designated constraints aren't met.
type ListSysDictTypeRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysDictTypeRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysDictTypeRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysDictTypeRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysDictTypeRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysDictTypeRepValidationError) ErrorName() string {
	return "ListSysDictTypeRepValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysDictTypeRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysDictTypeRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysDictTypeRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysDictTypeRepValidationError{}

// Validate checks the field values on ListSysDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysDictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysDictTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysDictTypeReplyMultiError, or nil if none found.
func (m *ListSysDictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysDictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysDictTypeReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysDictTypeReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysDictTypeReplyValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysDictTypeReplyMultiError(errors)
	}

	return nil
}

// ListSysDictTypeReplyMultiError is an error wrapping multiple validation
// errors returned by ListSysDictTypeReply.ValidateAll() if the designated
// constraints aren't met.
type ListSysDictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysDictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysDictTypeReplyMultiError) AllErrors() []error { return m }

// ListSysDictTypeReplyValidationError is the validation error returned by
// ListSysDictTypeReply.Validate if the designated constraints aren't met.
type ListSysDictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysDictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysDictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysDictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysDictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysDictTypeReplyValidationError) ErrorName() string {
	return "ListSysDictTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysDictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysDictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysDictTypeReplyValidationError{}

// Validate checks the field values on CacheSysDicReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CacheSysDicReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CacheSysDicReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CacheSysDicReqMultiError,
// or nil if none found.
func (m *CacheSysDicReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CacheSysDicReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CacheSysDicReqMultiError(errors)
	}

	return nil
}

// CacheSysDicReqMultiError is an error wrapping multiple validation errors
// returned by CacheSysDicReq.ValidateAll() if the designated constraints
// aren't met.
type CacheSysDicReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CacheSysDicReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CacheSysDicReqMultiError) AllErrors() []error { return m }

// CacheSysDicReqValidationError is the validation error returned by
// CacheSysDicReq.Validate if the designated constraints aren't met.
type CacheSysDicReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CacheSysDicReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CacheSysDicReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CacheSysDicReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CacheSysDicReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CacheSysDicReqValidationError) ErrorName() string { return "CacheSysDicReqValidationError" }

// Error satisfies the builtin error interface
func (e CacheSysDicReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCacheSysDicReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CacheSysDicReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CacheSysDicReqValidationError{}

// Validate checks the field values on OptionSelectTypeRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OptionSelectTypeRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OptionSelectTypeRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OptionSelectTypeRepMultiError, or nil if none found.
func (m *OptionSelectTypeRep) ValidateAll() error {
	return m.validate(true)
}

func (m *OptionSelectTypeRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return OptionSelectTypeRepMultiError(errors)
	}

	return nil
}

// OptionSelectTypeRepMultiError is an error wrapping multiple validation
// errors returned by OptionSelectTypeRep.ValidateAll() if the designated
// constraints aren't met.
type OptionSelectTypeRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionSelectTypeRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionSelectTypeRepMultiError) AllErrors() []error { return m }

// OptionSelectTypeRepValidationError is the validation error returned by
// OptionSelectTypeRep.Validate if the designated constraints aren't met.
type OptionSelectTypeRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionSelectTypeRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionSelectTypeRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionSelectTypeRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionSelectTypeRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionSelectTypeRepValidationError) ErrorName() string {
	return "OptionSelectTypeRepValidationError"
}

// Error satisfies the builtin error interface
func (e OptionSelectTypeRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptionSelectTypeRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionSelectTypeRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionSelectTypeRepValidationError{}

// Validate checks the field values on OptionSelectTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OptionSelectTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OptionSelectTypeReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OptionSelectTypeReplyMultiError, or nil if none found.
func (m *OptionSelectTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *OptionSelectTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDict() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, OptionSelectTypeReplyValidationError{
						field:  fmt.Sprintf("Dict[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, OptionSelectTypeReplyValidationError{
						field:  fmt.Sprintf("Dict[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return OptionSelectTypeReplyValidationError{
					field:  fmt.Sprintf("Dict[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return OptionSelectTypeReplyMultiError(errors)
	}

	return nil
}

// OptionSelectTypeReplyMultiError is an error wrapping multiple validation
// errors returned by OptionSelectTypeReply.ValidateAll() if the designated
// constraints aren't met.
type OptionSelectTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OptionSelectTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OptionSelectTypeReplyMultiError) AllErrors() []error { return m }

// OptionSelectTypeReplyValidationError is the validation error returned by
// OptionSelectTypeReply.Validate if the designated constraints aren't met.
type OptionSelectTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OptionSelectTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OptionSelectTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OptionSelectTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OptionSelectTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OptionSelectTypeReplyValidationError) ErrorName() string {
	return "OptionSelectTypeReplyValidationError"
}

// Error satisfies the builtin error interface
func (e OptionSelectTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOptionSelectTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OptionSelectTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OptionSelectTypeReplyValidationError{}

// Validate checks the field values on SysDictDataRep with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SysDictDataRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SysDictDataRep with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SysDictDataRepMultiError,
// or nil if none found.
func (m *SysDictDataRep) ValidateAll() error {
	return m.validate(true)
}

func (m *SysDictDataRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	// no validation rules for DictSort

	// no validation rules for DictLabel

	// no validation rules for DictValue

	// no validation rules for DictType

	// no validation rules for CssClass

	// no validation rules for ListClass

	// no validation rules for IsDefault

	// no validation rules for Status

	// no validation rules for Default

	// no validation rules for CreateAt

	// no validation rules for Remark

	if len(errors) > 0 {
		return SysDictDataRepMultiError(errors)
	}

	return nil
}

// SysDictDataRepMultiError is an error wrapping multiple validation errors
// returned by SysDictDataRep.ValidateAll() if the designated constraints
// aren't met.
type SysDictDataRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SysDictDataRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SysDictDataRepMultiError) AllErrors() []error { return m }

// SysDictDataRepValidationError is the validation error returned by
// SysDictDataRep.Validate if the designated constraints aren't met.
type SysDictDataRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SysDictDataRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SysDictDataRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SysDictDataRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SysDictDataRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SysDictDataRepValidationError) ErrorName() string { return "SysDictDataRepValidationError" }

// Error satisfies the builtin error interface
func (e SysDictDataRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSysDictDataRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SysDictDataRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SysDictDataRepValidationError{}

// Validate checks the field values on DeleteSysDictDataRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSysDictDataRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSysDictDataRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSysDictDataRepMultiError, or nil if none found.
func (m *DeleteSysDictDataRep) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSysDictDataRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetId()) < 1 {
		err := DeleteSysDictDataRepValidationError{
			field:  "Id",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteSysDictDataRepMultiError(errors)
	}

	return nil
}

// DeleteSysDictDataRepMultiError is an error wrapping multiple validation
// errors returned by DeleteSysDictDataRep.ValidateAll() if the designated
// constraints aren't met.
type DeleteSysDictDataRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSysDictDataRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSysDictDataRepMultiError) AllErrors() []error { return m }

// DeleteSysDictDataRepValidationError is the validation error returned by
// DeleteSysDictDataRep.Validate if the designated constraints aren't met.
type DeleteSysDictDataRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSysDictDataRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSysDictDataRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSysDictDataRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSysDictDataRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSysDictDataRepValidationError) ErrorName() string {
	return "DeleteSysDictDataRepValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSysDictDataRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSysDictDataRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSysDictDataRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSysDictDataRepValidationError{}

// Validate checks the field values on ListSysDictDataRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysDictDataRep) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysDictDataRep with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysDictDataRepMultiError, or nil if none found.
func (m *ListSysDictDataRep) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysDictDataRep) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageNum() <= 0 {
		err := ListSysDictDataRepValidationError{
			field:  "PageNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() <= 0 {
		err := ListSysDictDataRepValidationError{
			field:  "PageSize",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for DictType

	if len(errors) > 0 {
		return ListSysDictDataRepMultiError(errors)
	}

	return nil
}

// ListSysDictDataRepMultiError is an error wrapping multiple validation errors
// returned by ListSysDictDataRep.ValidateAll() if the designated constraints
// aren't met.
type ListSysDictDataRepMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysDictDataRepMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysDictDataRepMultiError) AllErrors() []error { return m }

// ListSysDictDataRepValidationError is the validation error returned by
// ListSysDictDataRep.Validate if the designated constraints aren't met.
type ListSysDictDataRepValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysDictDataRepValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysDictDataRepValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysDictDataRepValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysDictDataRepValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysDictDataRepValidationError) ErrorName() string {
	return "ListSysDictDataRepValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysDictDataRepValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysDictDataRep.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysDictDataRepValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysDictDataRepValidationError{}

// Validate checks the field values on ListSysDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSysDictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSysDictDataReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSysDictDataReplyMultiError, or nil if none found.
func (m *ListSysDictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSysDictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetRows() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSysDictDataReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSysDictDataReplyValidationError{
						field:  fmt.Sprintf("Rows[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSysDictDataReplyValidationError{
					field:  fmt.Sprintf("Rows[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSysDictDataReplyMultiError(errors)
	}

	return nil
}

// ListSysDictDataReplyMultiError is an error wrapping multiple validation
// errors returned by ListSysDictDataReply.ValidateAll() if the designated
// constraints aren't met.
type ListSysDictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSysDictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSysDictDataReplyMultiError) AllErrors() []error { return m }

// ListSysDictDataReplyValidationError is the validation error returned by
// ListSysDictDataReply.Validate if the designated constraints aren't met.
type ListSysDictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSysDictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSysDictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSysDictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSysDictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSysDictDataReplyValidationError) ErrorName() string {
	return "ListSysDictDataReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ListSysDictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSysDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSysDictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSysDictDataReplyValidationError{}

// Validate checks the field values on DictTypeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictTypeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictTypeReplyMultiError, or
// nil if none found.
func (m *DictTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DictTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictId

	// no validation rules for CreatedAt

	// no validation rules for Remark

	// no validation rules for DictName

	// no validation rules for DictType

	// no validation rules for Status

	if len(errors) > 0 {
		return DictTypeReplyMultiError(errors)
	}

	return nil
}

// DictTypeReplyMultiError is an error wrapping multiple validation errors
// returned by DictTypeReply.ValidateAll() if the designated constraints
// aren't met.
type DictTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictTypeReplyMultiError) AllErrors() []error { return m }

// DictTypeReplyValidationError is the validation error returned by
// DictTypeReply.Validate if the designated constraints aren't met.
type DictTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictTypeReplyValidationError) ErrorName() string { return "DictTypeReplyValidationError" }

// Error satisfies the builtin error interface
func (e DictTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictTypeReplyValidationError{}

// Validate checks the field values on DictDataReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DictDataReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DictDataReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DictDataReplyMultiError, or
// nil if none found.
func (m *DictDataReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DictDataReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DictCode

	// no validation rules for DictSort

	// no validation rules for DictLabel

	// no validation rules for DictValue

	// no validation rules for DictType

	// no validation rules for CssClass

	// no validation rules for ListClass

	// no validation rules for IsDefault

	// no validation rules for Status

	// no validation rules for Default

	// no validation rules for CreatedAt

	// no validation rules for Remark

	if len(errors) > 0 {
		return DictDataReplyMultiError(errors)
	}

	return nil
}

// DictDataReplyMultiError is an error wrapping multiple validation errors
// returned by DictDataReply.ValidateAll() if the designated constraints
// aren't met.
type DictDataReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DictDataReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DictDataReplyMultiError) AllErrors() []error { return m }

// DictDataReplyValidationError is the validation error returned by
// DictDataReply.Validate if the designated constraints aren't met.
type DictDataReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DictDataReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DictDataReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DictDataReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DictDataReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DictDataReplyValidationError) ErrorName() string { return "DictDataReplyValidationError" }

// Error satisfies the builtin error interface
func (e DictDataReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDictDataReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DictDataReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DictDataReplyValidationError{}
