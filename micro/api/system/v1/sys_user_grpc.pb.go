// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: system/v1/sys_user.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysUser_CreateSysUser_FullMethodName      = "/api.system.v1.SysUser/CreateSysUser"
	SysUser_UpdateSysUser_FullMethodName      = "/api.system.v1.SysUser/UpdateSysUser"
	SysUser_ResetPwd_FullMethodName           = "/api.system.v1.SysUser/ResetPwd"
	SysUser_DeleteSysUser_FullMethodName      = "/api.system.v1.SysUser/DeleteSysUser"
	SysUser_SaveSysUser_FullMethodName        = "/api.system.v1.SysUser/SaveSysUser"
	SysUser_ListSysUser_FullMethodName        = "/api.system.v1.SysUser/ListSysUser"
	SysUser_DeptTree_FullMethodName           = "/api.system.v1.SysUser/DeptTree"
	SysUser_GetSysUser_FullMethodName         = "/api.system.v1.SysUser/GetSysUser"
	SysUser_GetOtherInfo_FullMethodName       = "/api.system.v1.SysUser/GetOtherInfo"
	SysUser_Profile_FullMethodName            = "/api.system.v1.SysUser/Profile"
	SysUser_GetAuthRoleSysUser_FullMethodName = "/api.system.v1.SysUser/GetAuthRoleSysUser"
	SysUser_AuthRoleSysUser_FullMethodName    = "/api.system.v1.SysUser/AuthRoleSysUser"
)

// SysUserClient is the client API for SysUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysUserClient interface {
	CreateSysUser(ctx context.Context, in *CreateSysUserRep, opts ...grpc.CallOption) (*CreateSysUserReply, error)
	UpdateSysUser(ctx context.Context, in *UpdateSysUserRep, opts ...grpc.CallOption) (*UpdateSysUserReply, error)
	ResetPwd(ctx context.Context, in *ResetPwdRep, opts ...grpc.CallOption) (*ResetPwdReply, error)
	DeleteSysUser(ctx context.Context, in *DeleteSysUserRep, opts ...grpc.CallOption) (*DeleteSysUserReply, error)
	SaveSysUser(ctx context.Context, in *SaveSysUserRep, opts ...grpc.CallOption) (*SaveSysUserReply, error)
	ListSysUser(ctx context.Context, in *ListSysUserRep, opts ...grpc.CallOption) (*ListSysUserReply, error)
	// 获取部门树
	DeptTree(ctx context.Context, in *DeptTreeReq, opts ...grpc.CallOption) (*DeptTreeReply, error)
	// 根据用户ID获取详细信息
	GetSysUser(ctx context.Context, in *GetSysUserRep, opts ...grpc.CallOption) (*GetSysUserReply, error)
	// 获取角色以及岗位详细信息
	GetOtherInfo(ctx context.Context, in *GetOtherInfoRep, opts ...grpc.CallOption) (*GetOtherInfoReply, error)
	Profile(ctx context.Context, in *ProfileRep, opts ...grpc.CallOption) (*ProfileReply, error)
	GetAuthRoleSysUser(ctx context.Context, in *GetAuthRoleSysUserRep, opts ...grpc.CallOption) (*GetAuthRoleSysUserReply, error)
	AuthRoleSysUser(ctx context.Context, in *AuthRoleSysUserRep, opts ...grpc.CallOption) (*AuthRoleSysUserReply, error)
}

type sysUserClient struct {
	cc grpc.ClientConnInterface
}

func NewSysUserClient(cc grpc.ClientConnInterface) SysUserClient {
	return &sysUserClient{cc}
}

func (c *sysUserClient) CreateSysUser(ctx context.Context, in *CreateSysUserRep, opts ...grpc.CallOption) (*CreateSysUserReply, error) {
	out := new(CreateSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_CreateSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) UpdateSysUser(ctx context.Context, in *UpdateSysUserRep, opts ...grpc.CallOption) (*UpdateSysUserReply, error) {
	out := new(UpdateSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_UpdateSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) ResetPwd(ctx context.Context, in *ResetPwdRep, opts ...grpc.CallOption) (*ResetPwdReply, error) {
	out := new(ResetPwdReply)
	err := c.cc.Invoke(ctx, SysUser_ResetPwd_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) DeleteSysUser(ctx context.Context, in *DeleteSysUserRep, opts ...grpc.CallOption) (*DeleteSysUserReply, error) {
	out := new(DeleteSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_DeleteSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) SaveSysUser(ctx context.Context, in *SaveSysUserRep, opts ...grpc.CallOption) (*SaveSysUserReply, error) {
	out := new(SaveSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_SaveSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) ListSysUser(ctx context.Context, in *ListSysUserRep, opts ...grpc.CallOption) (*ListSysUserReply, error) {
	out := new(ListSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_ListSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) DeptTree(ctx context.Context, in *DeptTreeReq, opts ...grpc.CallOption) (*DeptTreeReply, error) {
	out := new(DeptTreeReply)
	err := c.cc.Invoke(ctx, SysUser_DeptTree_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) GetSysUser(ctx context.Context, in *GetSysUserRep, opts ...grpc.CallOption) (*GetSysUserReply, error) {
	out := new(GetSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_GetSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) GetOtherInfo(ctx context.Context, in *GetOtherInfoRep, opts ...grpc.CallOption) (*GetOtherInfoReply, error) {
	out := new(GetOtherInfoReply)
	err := c.cc.Invoke(ctx, SysUser_GetOtherInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) Profile(ctx context.Context, in *ProfileRep, opts ...grpc.CallOption) (*ProfileReply, error) {
	out := new(ProfileReply)
	err := c.cc.Invoke(ctx, SysUser_Profile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) GetAuthRoleSysUser(ctx context.Context, in *GetAuthRoleSysUserRep, opts ...grpc.CallOption) (*GetAuthRoleSysUserReply, error) {
	out := new(GetAuthRoleSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_GetAuthRoleSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysUserClient) AuthRoleSysUser(ctx context.Context, in *AuthRoleSysUserRep, opts ...grpc.CallOption) (*AuthRoleSysUserReply, error) {
	out := new(AuthRoleSysUserReply)
	err := c.cc.Invoke(ctx, SysUser_AuthRoleSysUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysUserServer is the server API for SysUser service.
// All implementations must embed UnimplementedSysUserServer
// for forward compatibility
type SysUserServer interface {
	CreateSysUser(context.Context, *CreateSysUserRep) (*CreateSysUserReply, error)
	UpdateSysUser(context.Context, *UpdateSysUserRep) (*UpdateSysUserReply, error)
	ResetPwd(context.Context, *ResetPwdRep) (*ResetPwdReply, error)
	DeleteSysUser(context.Context, *DeleteSysUserRep) (*DeleteSysUserReply, error)
	SaveSysUser(context.Context, *SaveSysUserRep) (*SaveSysUserReply, error)
	ListSysUser(context.Context, *ListSysUserRep) (*ListSysUserReply, error)
	// 获取部门树
	DeptTree(context.Context, *DeptTreeReq) (*DeptTreeReply, error)
	// 根据用户ID获取详细信息
	GetSysUser(context.Context, *GetSysUserRep) (*GetSysUserReply, error)
	// 获取角色以及岗位详细信息
	GetOtherInfo(context.Context, *GetOtherInfoRep) (*GetOtherInfoReply, error)
	Profile(context.Context, *ProfileRep) (*ProfileReply, error)
	GetAuthRoleSysUser(context.Context, *GetAuthRoleSysUserRep) (*GetAuthRoleSysUserReply, error)
	AuthRoleSysUser(context.Context, *AuthRoleSysUserRep) (*AuthRoleSysUserReply, error)
	mustEmbedUnimplementedSysUserServer()
}

// UnimplementedSysUserServer must be embedded to have forward compatible implementations.
type UnimplementedSysUserServer struct {
}

func (UnimplementedSysUserServer) CreateSysUser(context.Context, *CreateSysUserRep) (*CreateSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysUser not implemented")
}
func (UnimplementedSysUserServer) UpdateSysUser(context.Context, *UpdateSysUserRep) (*UpdateSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysUser not implemented")
}
func (UnimplementedSysUserServer) ResetPwd(context.Context, *ResetPwdRep) (*ResetPwdReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPwd not implemented")
}
func (UnimplementedSysUserServer) DeleteSysUser(context.Context, *DeleteSysUserRep) (*DeleteSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysUser not implemented")
}
func (UnimplementedSysUserServer) SaveSysUser(context.Context, *SaveSysUserRep) (*SaveSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveSysUser not implemented")
}
func (UnimplementedSysUserServer) ListSysUser(context.Context, *ListSysUserRep) (*ListSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSysUser not implemented")
}
func (UnimplementedSysUserServer) DeptTree(context.Context, *DeptTreeReq) (*DeptTreeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeptTree not implemented")
}
func (UnimplementedSysUserServer) GetSysUser(context.Context, *GetSysUserRep) (*GetSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysUser not implemented")
}
func (UnimplementedSysUserServer) GetOtherInfo(context.Context, *GetOtherInfoRep) (*GetOtherInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOtherInfo not implemented")
}
func (UnimplementedSysUserServer) Profile(context.Context, *ProfileRep) (*ProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (UnimplementedSysUserServer) GetAuthRoleSysUser(context.Context, *GetAuthRoleSysUserRep) (*GetAuthRoleSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAuthRoleSysUser not implemented")
}
func (UnimplementedSysUserServer) AuthRoleSysUser(context.Context, *AuthRoleSysUserRep) (*AuthRoleSysUserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthRoleSysUser not implemented")
}
func (UnimplementedSysUserServer) mustEmbedUnimplementedSysUserServer() {}

// UnsafeSysUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysUserServer will
// result in compilation errors.
type UnsafeSysUserServer interface {
	mustEmbedUnimplementedSysUserServer()
}

func RegisterSysUserServer(s grpc.ServiceRegistrar, srv SysUserServer) {
	s.RegisterService(&SysUser_ServiceDesc, srv)
}

func _SysUser_CreateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).CreateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_CreateSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).CreateSysUser(ctx, req.(*CreateSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_UpdateSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).UpdateSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_UpdateSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).UpdateSysUser(ctx, req.(*UpdateSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_ResetPwd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPwdRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).ResetPwd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_ResetPwd_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).ResetPwd(ctx, req.(*ResetPwdRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_DeleteSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).DeleteSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_DeleteSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).DeleteSysUser(ctx, req.(*DeleteSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_SaveSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).SaveSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_SaveSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).SaveSysUser(ctx, req.(*SaveSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_ListSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).ListSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_ListSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).ListSysUser(ctx, req.(*ListSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_DeptTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeptTreeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).DeptTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_DeptTree_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).DeptTree(ctx, req.(*DeptTreeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_GetSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).GetSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_GetSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).GetSysUser(ctx, req.(*GetSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_GetOtherInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOtherInfoRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).GetOtherInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_GetOtherInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).GetOtherInfo(ctx, req.(*GetOtherInfoRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_Profile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).Profile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_Profile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).Profile(ctx, req.(*ProfileRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_GetAuthRoleSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthRoleSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).GetAuthRoleSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_GetAuthRoleSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).GetAuthRoleSysUser(ctx, req.(*GetAuthRoleSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysUser_AuthRoleSysUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRoleSysUserRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysUserServer).AuthRoleSysUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysUser_AuthRoleSysUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysUserServer).AuthRoleSysUser(ctx, req.(*AuthRoleSysUserRep))
	}
	return interceptor(ctx, in, info, handler)
}

// SysUser_ServiceDesc is the grpc.ServiceDesc for SysUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.system.v1.SysUser",
	HandlerType: (*SysUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSysUser",
			Handler:    _SysUser_CreateSysUser_Handler,
		},
		{
			MethodName: "UpdateSysUser",
			Handler:    _SysUser_UpdateSysUser_Handler,
		},
		{
			MethodName: "ResetPwd",
			Handler:    _SysUser_ResetPwd_Handler,
		},
		{
			MethodName: "DeleteSysUser",
			Handler:    _SysUser_DeleteSysUser_Handler,
		},
		{
			MethodName: "SaveSysUser",
			Handler:    _SysUser_SaveSysUser_Handler,
		},
		{
			MethodName: "ListSysUser",
			Handler:    _SysUser_ListSysUser_Handler,
		},
		{
			MethodName: "DeptTree",
			Handler:    _SysUser_DeptTree_Handler,
		},
		{
			MethodName: "GetSysUser",
			Handler:    _SysUser_GetSysUser_Handler,
		},
		{
			MethodName: "GetOtherInfo",
			Handler:    _SysUser_GetOtherInfo_Handler,
		},
		{
			MethodName: "Profile",
			Handler:    _SysUser_Profile_Handler,
		},
		{
			MethodName: "GetAuthRoleSysUser",
			Handler:    _SysUser_GetAuthRoleSysUser_Handler,
		},
		{
			MethodName: "AuthRoleSysUser",
			Handler:    _SysUser_AuthRoleSysUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/v1/sys_user.proto",
}
