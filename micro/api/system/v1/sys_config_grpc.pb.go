// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: system/v1/sys_config.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SysConfig_CreateSysConfig_FullMethodName = "/api.system.v1.SysConfig/CreateSysConfig"
	SysConfig_UpdateSysConfig_FullMethodName = "/api.system.v1.SysConfig/UpdateSysConfig"
	SysConfig_DeleteSysConfig_FullMethodName = "/api.system.v1.SysConfig/DeleteSysConfig"
	SysConfig_GetSysConfig_FullMethodName    = "/api.system.v1.SysConfig/GetSysConfig"
	SysConfig_ListSysConfig_FullMethodName   = "/api.system.v1.SysConfig/ListSysConfig"
	SysConfig_ConfigByKey_FullMethodName     = "/api.system.v1.SysConfig/ConfigByKey"
)

// SysConfigClient is the client API for SysConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SysConfigClient interface {
	CreateSysConfig(ctx context.Context, in *CreateSysConfigRep, opts ...grpc.CallOption) (*EmptySysConfigReply, error)
	UpdateSysConfig(ctx context.Context, in *UpdateSysConfigRep, opts ...grpc.CallOption) (*EmptySysConfigReply, error)
	DeleteSysConfig(ctx context.Context, in *DeleteSysConfigRep, opts ...grpc.CallOption) (*EmptySysConfigReply, error)
	GetSysConfig(ctx context.Context, in *GetSysConfigRep, opts ...grpc.CallOption) (*GetSysConfigReply, error)
	ListSysConfig(ctx context.Context, in *ListSysConfigRep, opts ...grpc.CallOption) (*ListSysConfigReply, error)
	ConfigByKey(ctx context.Context, in *ConfigByKeyReq, opts ...grpc.CallOption) (*ConfigByKeyReply, error)
}

type sysConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewSysConfigClient(cc grpc.ClientConnInterface) SysConfigClient {
	return &sysConfigClient{cc}
}

func (c *sysConfigClient) CreateSysConfig(ctx context.Context, in *CreateSysConfigRep, opts ...grpc.CallOption) (*EmptySysConfigReply, error) {
	out := new(EmptySysConfigReply)
	err := c.cc.Invoke(ctx, SysConfig_CreateSysConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) UpdateSysConfig(ctx context.Context, in *UpdateSysConfigRep, opts ...grpc.CallOption) (*EmptySysConfigReply, error) {
	out := new(EmptySysConfigReply)
	err := c.cc.Invoke(ctx, SysConfig_UpdateSysConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) DeleteSysConfig(ctx context.Context, in *DeleteSysConfigRep, opts ...grpc.CallOption) (*EmptySysConfigReply, error) {
	out := new(EmptySysConfigReply)
	err := c.cc.Invoke(ctx, SysConfig_DeleteSysConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) GetSysConfig(ctx context.Context, in *GetSysConfigRep, opts ...grpc.CallOption) (*GetSysConfigReply, error) {
	out := new(GetSysConfigReply)
	err := c.cc.Invoke(ctx, SysConfig_GetSysConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) ListSysConfig(ctx context.Context, in *ListSysConfigRep, opts ...grpc.CallOption) (*ListSysConfigReply, error) {
	out := new(ListSysConfigReply)
	err := c.cc.Invoke(ctx, SysConfig_ListSysConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sysConfigClient) ConfigByKey(ctx context.Context, in *ConfigByKeyReq, opts ...grpc.CallOption) (*ConfigByKeyReply, error) {
	out := new(ConfigByKeyReply)
	err := c.cc.Invoke(ctx, SysConfig_ConfigByKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SysConfigServer is the server API for SysConfig service.
// All implementations must embed UnimplementedSysConfigServer
// for forward compatibility
type SysConfigServer interface {
	CreateSysConfig(context.Context, *CreateSysConfigRep) (*EmptySysConfigReply, error)
	UpdateSysConfig(context.Context, *UpdateSysConfigRep) (*EmptySysConfigReply, error)
	DeleteSysConfig(context.Context, *DeleteSysConfigRep) (*EmptySysConfigReply, error)
	GetSysConfig(context.Context, *GetSysConfigRep) (*GetSysConfigReply, error)
	ListSysConfig(context.Context, *ListSysConfigRep) (*ListSysConfigReply, error)
	ConfigByKey(context.Context, *ConfigByKeyReq) (*ConfigByKeyReply, error)
	mustEmbedUnimplementedSysConfigServer()
}

// UnimplementedSysConfigServer must be embedded to have forward compatible implementations.
type UnimplementedSysConfigServer struct {
}

func (UnimplementedSysConfigServer) CreateSysConfig(context.Context, *CreateSysConfigRep) (*EmptySysConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSysConfig not implemented")
}
func (UnimplementedSysConfigServer) UpdateSysConfig(context.Context, *UpdateSysConfigRep) (*EmptySysConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSysConfig not implemented")
}
func (UnimplementedSysConfigServer) DeleteSysConfig(context.Context, *DeleteSysConfigRep) (*EmptySysConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSysConfig not implemented")
}
func (UnimplementedSysConfigServer) GetSysConfig(context.Context, *GetSysConfigRep) (*GetSysConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSysConfig not implemented")
}
func (UnimplementedSysConfigServer) ListSysConfig(context.Context, *ListSysConfigRep) (*ListSysConfigReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSysConfig not implemented")
}
func (UnimplementedSysConfigServer) ConfigByKey(context.Context, *ConfigByKeyReq) (*ConfigByKeyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigByKey not implemented")
}
func (UnimplementedSysConfigServer) mustEmbedUnimplementedSysConfigServer() {}

// UnsafeSysConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SysConfigServer will
// result in compilation errors.
type UnsafeSysConfigServer interface {
	mustEmbedUnimplementedSysConfigServer()
}

func RegisterSysConfigServer(s grpc.ServiceRegistrar, srv SysConfigServer) {
	s.RegisterService(&SysConfig_ServiceDesc, srv)
}

func _SysConfig_CreateSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSysConfigRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).CreateSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysConfig_CreateSysConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).CreateSysConfig(ctx, req.(*CreateSysConfigRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_UpdateSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSysConfigRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).UpdateSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysConfig_UpdateSysConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).UpdateSysConfig(ctx, req.(*UpdateSysConfigRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_DeleteSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSysConfigRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).DeleteSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysConfig_DeleteSysConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).DeleteSysConfig(ctx, req.(*DeleteSysConfigRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_GetSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSysConfigRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).GetSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysConfig_GetSysConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).GetSysConfig(ctx, req.(*GetSysConfigRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_ListSysConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSysConfigRep)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).ListSysConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysConfig_ListSysConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).ListSysConfig(ctx, req.(*ListSysConfigRep))
	}
	return interceptor(ctx, in, info, handler)
}

func _SysConfig_ConfigByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigByKeyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SysConfigServer).ConfigByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SysConfig_ConfigByKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SysConfigServer).ConfigByKey(ctx, req.(*ConfigByKeyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SysConfig_ServiceDesc is the grpc.ServiceDesc for SysConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SysConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.system.v1.SysConfig",
	HandlerType: (*SysConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSysConfig",
			Handler:    _SysConfig_CreateSysConfig_Handler,
		},
		{
			MethodName: "UpdateSysConfig",
			Handler:    _SysConfig_UpdateSysConfig_Handler,
		},
		{
			MethodName: "DeleteSysConfig",
			Handler:    _SysConfig_DeleteSysConfig_Handler,
		},
		{
			MethodName: "GetSysConfig",
			Handler:    _SysConfig_GetSysConfig_Handler,
		},
		{
			MethodName: "ListSysConfig",
			Handler:    _SysConfig_ListSysConfig_Handler,
		},
		{
			MethodName: "ConfigByKey",
			Handler:    _SysConfig_ConfigByKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system/v1/sys_config.proto",
}
